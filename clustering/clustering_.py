{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "RPpLxFAbVmF9"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "headers = [\"symboling\", \"normalized-losses\", \"make\", \"fuel-type\", \"aspiration\",\n",
        "\"num-of-doors\", \"body-style\", \"drive-wheels\", \"engine-location\",\n",
        "\"wheel-base\", \"length\", \"width\", \"height\", \"curb-weight\",\n",
        "\"engine-type\", \"num-of-cylinders\", \"engine-size\", \"fuel-system\",\n",
        "\"bore\", \"stroke\", \"compression-ratio\", \"horsepower\", \"peak-rpm\",\n",
        "\"city-mpg\", \"highway-mpg\", \"price\"]\n",
        "df = pd.read_csv('/content/imports-85.data', header=None, names=headers)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "GT_le4PyVxIp",
        "outputId": "a6397117-ad5e-4697-c090-4e6d567ddfaa"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     symboling normalized-losses         make fuel-type aspiration  \\\n",
              "0            3                 ?  alfa-romero       gas        std   \n",
              "1            3                 ?  alfa-romero       gas        std   \n",
              "2            1                 ?  alfa-romero       gas        std   \n",
              "3            2               164         audi       gas        std   \n",
              "4            2               164         audi       gas        std   \n",
              "..         ...               ...          ...       ...        ...   \n",
              "200         -1                95        volvo       gas        std   \n",
              "201         -1                95        volvo       gas      turbo   \n",
              "202         -1                95        volvo       gas        std   \n",
              "203         -1                95        volvo    diesel      turbo   \n",
              "204         -1                95        volvo       gas      turbo   \n",
              "\n",
              "    num-of-doors   body-style drive-wheels engine-location  wheel-base  ...  \\\n",
              "0            two  convertible          rwd           front        88.6  ...   \n",
              "1            two  convertible          rwd           front        88.6  ...   \n",
              "2            two    hatchback          rwd           front        94.5  ...   \n",
              "3           four        sedan          fwd           front        99.8  ...   \n",
              "4           four        sedan          4wd           front        99.4  ...   \n",
              "..           ...          ...          ...             ...         ...  ...   \n",
              "200         four        sedan          rwd           front       109.1  ...   \n",
              "201         four        sedan          rwd           front       109.1  ...   \n",
              "202         four        sedan          rwd           front       109.1  ...   \n",
              "203         four        sedan          rwd           front       109.1  ...   \n",
              "204         four        sedan          rwd           front       109.1  ...   \n",
              "\n",
              "     engine-size  fuel-system  bore  stroke compression-ratio horsepower  \\\n",
              "0            130         mpfi  3.47    2.68               9.0        111   \n",
              "1            130         mpfi  3.47    2.68               9.0        111   \n",
              "2            152         mpfi  2.68    3.47               9.0        154   \n",
              "3            109         mpfi  3.19    3.40              10.0        102   \n",
              "4            136         mpfi  3.19    3.40               8.0        115   \n",
              "..           ...          ...   ...     ...               ...        ...   \n",
              "200          141         mpfi  3.78    3.15               9.5        114   \n",
              "201          141         mpfi  3.78    3.15               8.7        160   \n",
              "202          173         mpfi  3.58    2.87               8.8        134   \n",
              "203          145          idi  3.01    3.40              23.0        106   \n",
              "204          141         mpfi  3.78    3.15               9.5        114   \n",
              "\n",
              "     peak-rpm city-mpg highway-mpg  price  \n",
              "0        5000       21          27  13495  \n",
              "1        5000       21          27  16500  \n",
              "2        5000       19          26  16500  \n",
              "3        5500       24          30  13950  \n",
              "4        5500       18          22  17450  \n",
              "..        ...      ...         ...    ...  \n",
              "200      5400       23          28  16845  \n",
              "201      5300       19          25  19045  \n",
              "202      5500       18          23  21485  \n",
              "203      4800       26          27  22470  \n",
              "204      5400       19          25  22625  \n",
              "\n",
              "[205 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba68aa77-afde-47e2-b50c-695f7535ba2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>symboling</th>\n",
              "      <th>normalized-losses</th>\n",
              "      <th>make</th>\n",
              "      <th>fuel-type</th>\n",
              "      <th>aspiration</th>\n",
              "      <th>num-of-doors</th>\n",
              "      <th>body-style</th>\n",
              "      <th>drive-wheels</th>\n",
              "      <th>engine-location</th>\n",
              "      <th>wheel-base</th>\n",
              "      <th>...</th>\n",
              "      <th>engine-size</th>\n",
              "      <th>fuel-system</th>\n",
              "      <th>bore</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compression-ratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peak-rpm</th>\n",
              "      <th>city-mpg</th>\n",
              "      <th>highway-mpg</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>?</td>\n",
              "      <td>alfa-romero</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>130</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>13495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>?</td>\n",
              "      <td>alfa-romero</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>130</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>16500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>?</td>\n",
              "      <td>alfa-romero</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>hatchback</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>94.5</td>\n",
              "      <td>...</td>\n",
              "      <td>152</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>2.68</td>\n",
              "      <td>3.47</td>\n",
              "      <td>9.0</td>\n",
              "      <td>154</td>\n",
              "      <td>5000</td>\n",
              "      <td>19</td>\n",
              "      <td>26</td>\n",
              "      <td>16500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>164</td>\n",
              "      <td>audi</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>fwd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.8</td>\n",
              "      <td>...</td>\n",
              "      <td>109</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>10.0</td>\n",
              "      <td>102</td>\n",
              "      <td>5500</td>\n",
              "      <td>24</td>\n",
              "      <td>30</td>\n",
              "      <td>13950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>164</td>\n",
              "      <td>audi</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>4wd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.4</td>\n",
              "      <td>...</td>\n",
              "      <td>136</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>8.0</td>\n",
              "      <td>115</td>\n",
              "      <td>5500</td>\n",
              "      <td>18</td>\n",
              "      <td>22</td>\n",
              "      <td>17450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>-1</td>\n",
              "      <td>95</td>\n",
              "      <td>volvo</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>109.1</td>\n",
              "      <td>...</td>\n",
              "      <td>141</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.78</td>\n",
              "      <td>3.15</td>\n",
              "      <td>9.5</td>\n",
              "      <td>114</td>\n",
              "      <td>5400</td>\n",
              "      <td>23</td>\n",
              "      <td>28</td>\n",
              "      <td>16845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>-1</td>\n",
              "      <td>95</td>\n",
              "      <td>volvo</td>\n",
              "      <td>gas</td>\n",
              "      <td>turbo</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>109.1</td>\n",
              "      <td>...</td>\n",
              "      <td>141</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.78</td>\n",
              "      <td>3.15</td>\n",
              "      <td>8.7</td>\n",
              "      <td>160</td>\n",
              "      <td>5300</td>\n",
              "      <td>19</td>\n",
              "      <td>25</td>\n",
              "      <td>19045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>-1</td>\n",
              "      <td>95</td>\n",
              "      <td>volvo</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>109.1</td>\n",
              "      <td>...</td>\n",
              "      <td>173</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.58</td>\n",
              "      <td>2.87</td>\n",
              "      <td>8.8</td>\n",
              "      <td>134</td>\n",
              "      <td>5500</td>\n",
              "      <td>18</td>\n",
              "      <td>23</td>\n",
              "      <td>21485</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>-1</td>\n",
              "      <td>95</td>\n",
              "      <td>volvo</td>\n",
              "      <td>diesel</td>\n",
              "      <td>turbo</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>109.1</td>\n",
              "      <td>...</td>\n",
              "      <td>145</td>\n",
              "      <td>idi</td>\n",
              "      <td>3.01</td>\n",
              "      <td>3.40</td>\n",
              "      <td>23.0</td>\n",
              "      <td>106</td>\n",
              "      <td>4800</td>\n",
              "      <td>26</td>\n",
              "      <td>27</td>\n",
              "      <td>22470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>-1</td>\n",
              "      <td>95</td>\n",
              "      <td>volvo</td>\n",
              "      <td>gas</td>\n",
              "      <td>turbo</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>109.1</td>\n",
              "      <td>...</td>\n",
              "      <td>141</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.78</td>\n",
              "      <td>3.15</td>\n",
              "      <td>9.5</td>\n",
              "      <td>114</td>\n",
              "      <td>5400</td>\n",
              "      <td>19</td>\n",
              "      <td>25</td>\n",
              "      <td>22625</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>205 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba68aa77-afde-47e2-b50c-695f7535ba2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba68aa77-afde-47e2-b50c-695f7535ba2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba68aa77-afde-47e2-b50c-695f7535ba2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0234f532-9df6-4eff-8b85-f03078af7074\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0234f532-9df6-4eff-8b85-f03078af7074')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0234f532-9df6-4eff-8b85-f03078af7074 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_acb21682-4827-48a6-893d-1d721a36ac76\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_acb21682-4827-48a6-893d-1d721a36ac76 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.replace('?', np.nan, inplace=True)"
      ],
      "metadata": {
        "id": "BvY8sKpZWbBa"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 899
        },
        "id": "Vi2GZ5Q7Wf52",
        "outputId": "d6e79ede-5deb-48eb-ae96-832141b10a79"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "symboling             0\n",
              "normalized-losses    41\n",
              "make                  0\n",
              "fuel-type             0\n",
              "aspiration            0\n",
              "num-of-doors          2\n",
              "body-style            0\n",
              "drive-wheels          0\n",
              "engine-location       0\n",
              "wheel-base            0\n",
              "length                0\n",
              "width                 0\n",
              "height                0\n",
              "curb-weight           0\n",
              "engine-type           0\n",
              "num-of-cylinders      0\n",
              "engine-size           0\n",
              "fuel-system           0\n",
              "bore                  4\n",
              "stroke                4\n",
              "compression-ratio     0\n",
              "horsepower            2\n",
              "peak-rpm              2\n",
              "city-mpg              0\n",
              "highway-mpg           0\n",
              "price                 4\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>symboling</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>normalized-losses</th>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>make</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fuel-type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aspiration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num-of-doors</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>body-style</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>drive-wheels</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>engine-location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wheel-base</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>length</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>width</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>height</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>curb-weight</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>engine-type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num-of-cylinders</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>engine-size</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fuel-system</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bore</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stroke</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>compression-ratio</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>peak-rpm</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city-mpg</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>highway-mpg</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "4F4ImqArWm7C"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x=df['price'], y=df['horsepower'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "hOXTdq8YW-oM",
        "outputId": "1f573afa-3999-4dc5-e772-66533f4d1672"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ec0b34e4ca0>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[['price', 'horsepower']].astype(float).values\n"
      ],
      "metadata": {
        "id": "TCDb8sOkXKO1"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans"
      ],
      "metadata": {
        "id": "5QT8C8TAaE6y"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "km3 = KMeans(n_clusters=3, random_state=42)\n",
        "km3.fit(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "39a5GP8jgGrT",
        "outputId": "f2a084fc-c4b4-465d-ba06-d23dbacdf398"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=3, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=3, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km3.transform(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vnUaBoGdgMJp",
        "outputId": "810b7b1e-221a-44fe-9489-db50f02205ed"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5792.46707266,  3140.13968467, 15301.04134778],\n",
              "       [ 9292.49121538,   360.24740334, 11801.02158584],\n",
              "       [ 9552.47273968,   620.26653349, 11541.032934  ],\n",
              "       [15717.53979091,  6784.98514587,  5376.00054855],\n",
              "       [ 8272.45260579,   660.61645179, 12821.05215922],\n",
              "       [ 8767.45117552,   167.37838852, 12326.05425387],\n",
              "       [12812.49119651,  3879.98438892,  8281.01658085],\n",
              "       [12947.49052999,  4014.98411326,  8146.01685563],\n",
              "       [ 3006.74867388, 11939.29841606, 24100.16645255],\n",
              "       [ 1862.60247714, 10795.18490991, 22956.09944869],\n",
              "       [ 1582.60774059, 10515.18919972, 22676.10067666],\n",
              "       [ 2585.60307483, 11518.18521177, 23679.10220392],\n",
              "       [ 1780.61679473, 10713.19733969, 22874.10580074],\n",
              "       [  201.71885619,  9133.06364919, 21294.02971085],\n",
              "       [ 1928.61341304, 10861.19497509, 23022.10512059],\n",
              "       [ 1465.62626597, 10398.20259657, 22559.10727807],\n",
              "       [  548.71574578,  9481.21988842, 21642.11182356],\n",
              "       [  763.46384485,  8169.12657808, 20330.06043588],\n",
              "       [ 4806.85966724,  4126.05492441, 16287.0016941 ],\n",
              "       [ 1678.72388401, 10611.26118357, 22772.13902145],\n",
              "       [ 1302.58059483, 10235.16091023, 22396.0846364 ],\n",
              "       [ 2758.64910066, 11691.22728501, 23852.12613849],\n",
              "       [ 1628.57901995, 10561.15667823, 22722.0834221 ],\n",
              "       [ 1028.58269064,  9961.16468143, 22122.08568469],\n",
              "       [  862.58460804,  9795.16706881, 21956.08633251],\n",
              "       [  862.58460804,  9795.16706881, 21956.08633251],\n",
              "       [  262.62975431,  9195.12424118, 21356.06226841],\n",
              "       [  937.44324756,  7995.1393151 , 20156.06597559],\n",
              "       [  687.44905705,  8245.13581286, 20406.0651673 ],\n",
              "       [ 2137.43427898,  6795.15971298, 18956.07015212],\n",
              "       [ 4787.47104683,  4145.11821891, 16306.04101152],\n",
              "       [ 2187.51394523,  6745.08604917, 18906.03733235],\n",
              "       [24092.61644017, 15160.04912045,  2999.24619781],\n",
              "       [ 2962.59921301, 11895.18009636, 24056.10060221],\n",
              "       [ 2062.61076984, 10995.19288907, 23156.10451228],\n",
              "       [ 1362.63031291, 10295.20438527, 22456.10777013],\n",
              "       [ 1462.62637578, 10395.20264816, 22556.10729234],\n",
              "       [  762.67561712,  9695.21556042, 21856.11072867],\n",
              "       [  687.43604439,  8245.14648004, 20406.07031983],\n",
              "       [  337.44514253,  8595.14148482, 20756.06913406],\n",
              "       [ 2437.42974661,  6495.17953131, 18656.07691606],\n",
              "       [ 2087.43016141,  6845.17156912, 19006.07549964],\n",
              "       [ 3087.42922578,  5845.19684798, 18006.07969265],\n",
              "       [10122.50423501,  1190.01004445, 10971.01407141],\n",
              "       [17394.4791264 ,  8461.97830079,  3699.02870042],\n",
              "       [20090.472168  , 11157.97779089,  1003.10584014],\n",
              "       [20018.47232948, 11085.97780129,  1075.09875199],\n",
              "       [23442.4657485 , 14509.97742118,  2349.04519465],\n",
              "       [26898.53036754, 17965.99503828,  5805.02616317],\n",
              "       [ 2768.60106891, 11701.18268753, 23862.10142011],\n",
              "       [ 1968.61258635, 10901.19434703, 23062.10493827],\n",
              "       [ 1488.62543877, 10421.20220198, 22582.10716881],\n",
              "       [  469.06447186,  9401.06251347, 21562.02934157],\n",
              "       [ 1801.77649372,  7131.03561578, 19292.01206009],\n",
              "       [  341.50903973,  8591.12153004, 20752.0592069 ],\n",
              "       [ 1168.59662013, 10101.10692195, 22262.05519099],\n",
              "       [   32.3034847 ,  8901.11812672, 21062.05833546],\n",
              "       [ 1121.988165  ,  7811.03458797, 19972.01164947],\n",
              "       [ 1121.988165  ,  7811.03458797, 19972.01164947],\n",
              "       [ 2658.59771764, 11591.17897784, 23752.09898179],\n",
              "       [ 1058.88047511,  9991.29767544, 22152.15389168],\n",
              "       [ 1508.6167676 , 10441.19606819, 22602.10401801],\n",
              "       [ 1308.62349841, 10241.19943223, 22402.10494665],\n",
              "       [  808.65489135,  9741.20844665, 21902.10734246],\n",
              "       [  858.65010687,  9791.20750378, 21952.10709797],\n",
              "       [  358.75796682,  9291.21738916, 21452.10959418],\n",
              "       [  658.67360287,  9591.21133425, 21752.10808269],\n",
              "       [  158.99115652,  9091.22164776, 21252.11062555],\n",
              "       [   92.15109449,  8841.22724196, 21002.11194239],\n",
              "       [  791.59868542,  8141.08660708, 20302.04053884],\n",
              "       [ 1391.52477737,  7541.09160351, 19702.0417734 ],\n",
              "       [ 5341.90543351,  3591.09761722, 15752.00660816],\n",
              "       [ 6241.83648869,  2691.12230105, 14852.00700861],\n",
              "       [ 5341.90543351,  3591.09761722, 15752.00660816],\n",
              "       [ 9041.77654238,   113.30616421, 12052.02086958],\n",
              "       [11542.04562563,  2609.94274726,  9552.20400361],\n",
              "       [10241.73561936,  1309.34378373, 10852.02317731],\n",
              "       [ 3742.46352586,  5190.12231264, 17351.04743354],\n",
              "       [ 5042.44804243,  3890.17218387, 16051.05645515],\n",
              "       [ 7422.44138264,  1510.40600067, 13671.06628345],\n",
              "       [ 8742.43925222,   193.03737904, 12351.07336739],\n",
              "       [ 8472.44328647,   461.13380063, 12621.06521023],\n",
              "       [ 9792.43796771,   860.6470994 , 11301.08018406],\n",
              "       [ 9992.61635894,  1060.05619851, 11101.00088335],\n",
              "       [ 2585.60307483, 11518.18521177, 23679.10220392],\n",
              "       [  201.71885619,  9133.06364919, 21294.02971085],\n",
              "       [ 1928.61341304, 10861.19497509, 23022.10512059],\n",
              "       [ 1465.62626597, 10398.20259657, 22559.10727807],\n",
              "       [  548.71574578,  9481.21988842, 21642.11182356],\n",
              "       [  763.46384485,  8169.12657808, 20330.06043588],\n",
              "       [13860.56806283,  4927.99614459,  7233.00203715],\n",
              "       [ 3692.5448956 ,  5240.05816954, 17401.02184309],\n",
              "       [ 4012.53551518,  4920.06040431, 17081.0222523 ],\n",
              "       [ 6882.4903782 ,  2050.11163487, 14211.02674629],\n",
              "       [ 7352.48634425,  1580.13775807, 13741.02766112],\n",
              "       [ 9992.74330277,  1060.43010196, 11101.02265743],\n",
              "       [10462.72910628,  1530.29069793, 10631.02365912],\n",
              "       [ 3039.5945852 , 11972.1740398 , 24133.09741912],\n",
              "       [ 1104.59837483, 10037.1798971 , 22198.09391523],\n",
              "       [  554.62380914,  9487.18894596, 21648.09630128],\n",
              "       [ 1031.57377854,  9964.13454542, 22125.06978935],\n",
              "       [  382.57556192,  9315.14226056, 21476.07189836],\n",
              "       [ 1802.47762479,  7130.10959651, 19291.04920603],\n",
              "       [ 1075.42828113,  7857.16424074, 20018.07713502],\n",
              "       [ 3101.5769723 ,  5831.05151844, 17992.01962095],\n",
              "       [  694.57428861,  9627.13842175, 21788.0708688 ],\n",
              "       [ 2040.47175175,  6892.11255893, 19053.04982068],\n",
              "       [  144.58022824,  9077.14536631, 21238.07270408],\n",
              "       [ 3536.55855916,  5396.05375218, 17557.02010709],\n",
              "       [ 2809.63381416, 11742.21482317, 23903.11946255],\n",
              "       [ 1819.66704912, 10752.23241056, 22913.12462413],\n",
              "       [ 1669.67552282, 10602.23536184, 22763.12544535],\n",
              "       [ 1239.71117847, 10172.24430456, 22333.12786067],\n",
              "       [  260.23308894,  9192.26781186, 21353.13372882],\n",
              "       [  620.70384289,  8312.29364377, 20473.13947691],\n",
              "       [ 1219.61816179, 10152.19511338, 22313.10231451],\n",
              "       [  959.63047179,  9892.19961582, 22053.10352077],\n",
              "       [  260.72895476,  9192.31348678, 21353.15580653],\n",
              "       [  370.38572847,  9302.31006134, 21463.15500801],\n",
              "       [  419.70477355,  9352.20976695, 21513.10611925],\n",
              "       [  200.70355035,  8732.22297019, 20893.10926832],\n",
              "       [ 1100.47762632,  7832.24585569, 19993.11418709],\n",
              "       [  100.12767593,  9032.21635518, 21193.10772157],\n",
              "       [   81.11331376,  8852.22027039, 21013.10864432],\n",
              "       [ 1140.86147141,  7792.0423022 , 19953.01638595],\n",
              "       [ 1380.78600364,  7552.04288988, 19713.01658544],\n",
              "       [  293.57821729,  8641.03355266, 20802.01118466],\n",
              "       [ 1481.85190851,  7451.03510874, 19612.01186331],\n",
              "       [ 1831.77077432,  7101.03566566, 19262.01207887],\n",
              "       [ 3041.63412817,  5891.03810087, 18052.0128885 ],\n",
              "       [ 3391.61278164,  5541.03900358, 17702.01314333],\n",
              "       [ 9511.49342   ,   579.12158538, 11582.02008833],\n",
              "       [  790.51052931,  8142.10777093, 20303.05114398],\n",
              "       [ 2540.43842434,  6392.268902  , 18553.11236611],\n",
              "       [ 1830.46322668,  7102.12006585, 19263.05390521],\n",
              "       [ 2740.45128776,  6192.13421175, 18353.056578  ],\n",
              "       [ 3090.44856801,  5842.1408259 , 18003.05767794],\n",
              "       [ 8400.81271213,   532.98673368, 12693.02162206],\n",
              "       [ 7840.84024061,  1092.49326082, 13253.02070843],\n",
              "       [ 7532.80537061,  1400.28459733, 13561.01252165],\n",
              "       [  383.63484845,  9315.34185663, 21476.17047961],\n",
              "       [  182.62750623,  9115.1298923 , 21276.06494996],\n",
              "       [  165.05664768,  9095.34954962, 21256.17224407],\n",
              "       [   37.69358079,  8895.13251601, 21056.06562858],\n",
              "       [  337.45691528,  8595.13631024, 20756.06657715],\n",
              "       [ 1337.48594101,  7595.26857741, 19756.1224987 ],\n",
              "       [ 1837.53045408,  7095.08297889, 19256.03665379],\n",
              "       [ 1822.45189153,  7110.13063983, 19271.05871614],\n",
              "       [ 4782.54441092,  4150.05083172, 16311.01703182],\n",
              "       [ 5257.5338279 ,  3675.05432434, 15836.01754269],\n",
              "       [ 7827.49884275,  1105.12528968, 13266.0209412 ],\n",
              "       [ 8357.49430406,   575.21879994, 12736.02181265],\n",
              "       [10262.75067091,  1330.38612411, 10831.02754844],\n",
              "       [10792.73478977,  1860.26933564, 10301.02896584],\n",
              "       [ 8687.49175783,   245.48106549, 12406.02239286],\n",
              "       [10887.71732427,  1955.22233572, 10206.02464434],\n",
              "       [13327.53454478,  4394.97906178,  7766.00082121],\n",
              "       [14312.44994042,  5380.0252523 ,  6781.07349577],\n",
              "       [14467.46599495,  5534.99645126,  6626.04192654]])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km3.labels_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4c9_bVQgMFV",
        "outputId": "63085b06-db17-4a5c-f056-f93b4b21ce2b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
              "       2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,\n",
              "       0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
              "       0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "mms = MinMaxScaler()\n",
        "X_scaled = mms.fit_transform(X)"
      ],
      "metadata": {
        "id": "mTCykeDZeFCf"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "km3_scaled = KMeans(n_clusters=3, random_state=42)\n",
        "km3_scaled.fit(X_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "PzEgCoLufA1d",
        "outputId": "030a16f9-3f0b-42a7-9df5-e3642fc0442e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=3, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=3, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km3_scaled.transform(X_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "7E9yxoLSfWNs",
        "outputId": "0d5abd0d-04fb-4959-d2b0-37a7767ea976"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.29488435, 0.3660202 , 0.0588073 ],\n",
              "       [0.43914586, 0.22956574, 0.1854391 ],\n",
              "       [0.42553132, 0.25527376, 0.18471947],\n",
              "       [0.70930915, 0.11014898, 0.45143877],\n",
              "       [0.35672713, 0.32700729, 0.14094439],\n",
              "       [0.37074951, 0.32002955, 0.15724678],\n",
              "       [0.55616759, 0.16176784, 0.30938162],\n",
              "       [0.55983737, 0.1620214 , 0.31361792],\n",
              "       [0.17376449, 0.82705811, 0.44290717],\n",
              "       [0.03994112, 0.69337307, 0.30374497],\n",
              "       [0.03108042, 0.68688632, 0.29767643],\n",
              "       [0.06707412, 0.71968759, 0.32967876],\n",
              "       [0.04315668, 0.70098647, 0.31203823],\n",
              "       [0.20000045, 0.51495581, 0.1454307 ],\n",
              "       [0.04731514, 0.70438493, 0.31518345],\n",
              "       [0.03499249, 0.69381511, 0.30550258],\n",
              "       [0.02505175, 0.67343976, 0.28782456],\n",
              "       [0.1179916 , 0.5476745 , 0.15729713],\n",
              "       [0.51622826, 0.2605974 , 0.26562946],\n",
              "       [0.09577915, 0.74805933, 0.3635928 ],\n",
              "       [0.03435625, 0.65218397, 0.26197815],\n",
              "       [0.10293379, 0.76179742, 0.37356063],\n",
              "       [0.04154616, 0.65998582, 0.26962001],\n",
              "       [0.03008478, 0.64569571, 0.25573731],\n",
              "       [0.02863256, 0.64179645, 0.25204286],\n",
              "       [0.02863256, 0.64179645, 0.25204286],\n",
              "       [0.09520575, 0.58170243, 0.19151109],\n",
              "       [0.10901028, 0.55274058, 0.16294424],\n",
              "       [0.1050283 , 0.55866097, 0.16850922],\n",
              "       [0.13384923, 0.52524265, 0.14013715],\n",
              "       [0.26629078, 0.39267737, 0.03340138],\n",
              "       [0.2098458 , 0.45935644, 0.07175835],\n",
              "       [1.07581542, 0.43273277, 0.81527715],\n",
              "       [0.07893555, 0.72862193, 0.33835897],\n",
              "       [0.05120077, 0.70747763, 0.31807059],\n",
              "       [0.03261728, 0.69148878, 0.30341415],\n",
              "       [0.0349208 , 0.69374722, 0.30544141],\n",
              "       [0.02447517, 0.67812576, 0.2917583 ],\n",
              "       [0.09343702, 0.5679683 , 0.17837908],\n",
              "       [0.08815647, 0.57622408, 0.1861068 ],\n",
              "       [0.13276037, 0.52863717, 0.14777053],\n",
              "       [0.12369174, 0.53622449, 0.15259758],\n",
              "       [0.15056438, 0.51495416, 0.14095634],\n",
              "       [0.48163375, 0.1875672 , 0.22415542],\n",
              "       [0.69265217, 0.2181955 , 0.45935818],\n",
              "       [0.77254399, 0.29071866, 0.54679476],\n",
              "       [0.77038125, 0.28865355, 0.54444858],\n",
              "       [0.87463305, 0.39118388, 0.65649387],\n",
              "       [1.07284769, 0.48137174, 0.8295391 ],\n",
              "       [0.07280112, 0.72401083, 0.3338611 ],\n",
              "       [0.04846437, 0.70530657, 0.31604141],\n",
              "       [0.03554669, 0.69433584, 0.30597227],\n",
              "       [0.19943032, 0.5224166 , 0.15431579],\n",
              "       [0.30325058, 0.41002226, 0.10698212],\n",
              "       [0.1128192 , 0.55794186, 0.16763291],\n",
              "       [0.10821861, 0.5959638 , 0.20826122],\n",
              "       [0.1100198 , 0.5655893 , 0.17555923],\n",
              "       [0.29775474, 0.43015216, 0.1244087 ],\n",
              "       [0.29775474, 0.43015216, 0.1244087 ],\n",
              "       [0.06731596, 0.71677036, 0.32656693],\n",
              "       [0.11054666, 0.75059133, 0.37033068],\n",
              "       [0.03194417, 0.68997138, 0.30121344],\n",
              "       [0.02666578, 0.68542349, 0.2970904 ],\n",
              "       [0.0181149 , 0.67420916, 0.28720399],\n",
              "       [0.01847532, 0.67532039, 0.28816434],\n",
              "       [0.02145917, 0.66431343, 0.27886231],\n",
              "       [0.01794597, 0.67088939, 0.28436235],\n",
              "       [0.02577518, 0.65997759, 0.27533723],\n",
              "       [0.03232195, 0.65461328, 0.27109797],\n",
              "       [0.17381178, 0.50780383, 0.12235169],\n",
              "       [0.18063662, 0.49238851, 0.10448254],\n",
              "       [0.56562603, 0.24636332, 0.31335965],\n",
              "       [0.57706184, 0.21680967, 0.31867419],\n",
              "       [0.56562603, 0.24636332, 0.31335965],\n",
              "       [0.66602152, 0.15232948, 0.39879347],\n",
              "       [0.9380532 , 0.35987975, 0.6737529 ],\n",
              "       [0.68652553, 0.12354041, 0.41692217],\n",
              "       [0.22326863, 0.43562954, 0.05267744],\n",
              "       [0.24588825, 0.41776077, 0.07132849],\n",
              "       [0.31202489, 0.37505703, 0.12772015],\n",
              "       [0.35110313, 0.35684661, 0.16729333],\n",
              "       [0.34908657, 0.34809187, 0.154154  ],\n",
              "       [0.3829663 , 0.34570788, 0.20012535],\n",
              "       [0.58459819, 0.09044301, 0.31379248],\n",
              "       [0.06707412, 0.71968759, 0.32967876],\n",
              "       [0.20000045, 0.51495581, 0.1454307 ],\n",
              "       [0.04731514, 0.70438493, 0.31518345],\n",
              "       [0.03499249, 0.69381511, 0.30550258],\n",
              "       [0.02505175, 0.67343976, 0.28782456],\n",
              "       [0.1179916 , 0.5476745 , 0.15729713],\n",
              "       [0.67601524, 0.04513221, 0.41124182],\n",
              "       [0.29176403, 0.37871546, 0.03720636],\n",
              "       [0.29730108, 0.37036986, 0.03455506],\n",
              "       [0.35756939, 0.3021917 , 0.0985007 ],\n",
              "       [0.36887764, 0.29250997, 0.11334545],\n",
              "       [0.68212798, 0.1290194 , 0.41290606],\n",
              "       [0.69048904, 0.11895358, 0.42059233],\n",
              "       [0.0796584 , 0.72587911, 0.33551446],\n",
              "       [0.01551621, 0.66158717, 0.27229281],\n",
              "       [0.01002977, 0.64900426, 0.26090265],\n",
              "       [0.06850007, 0.61841745, 0.22814136],\n",
              "       [0.06858775, 0.60262601, 0.21227231],\n",
              "       [0.16903475, 0.49532879, 0.10494035],\n",
              "       [0.09032594, 0.5685665 , 0.18106938],\n",
              "       [0.2882025 , 0.39055911, 0.05321602],\n",
              "       [0.06768449, 0.61017246, 0.21977735],\n",
              "       [0.17312741, 0.48956663, 0.09922426],\n",
              "       [0.07031516, 0.59692761, 0.20671742],\n",
              "       [0.29491808, 0.37884078, 0.04533712],\n",
              "       [0.09474245, 0.75329003, 0.36435458],\n",
              "       [0.07377876, 0.73108236, 0.34429927],\n",
              "       [0.071406  , 0.72778953, 0.34143726],\n",
              "       [0.06625361, 0.71846009, 0.33351399],\n",
              "       [0.06568677, 0.6978365 , 0.31715173],\n",
              "       [0.0779346 , 0.68012749, 0.30471533],\n",
              "       [0.02026248, 0.6785763 , 0.29006902],\n",
              "       [0.01390925, 0.67269546, 0.28481263],\n",
              "       [0.10448687, 0.72934059, 0.35264797],\n",
              "       [0.10401503, 0.73151179, 0.35418754],\n",
              "       [0.01498518, 0.66067894, 0.27445249],\n",
              "       [0.03259868, 0.64722706, 0.2635795 ],\n",
              "       [0.06168954, 0.62840256, 0.25001699],\n",
              "       [0.02345259, 0.65368868, 0.26869629],\n",
              "       [0.02887065, 0.64980087, 0.26559268],\n",
              "       [0.27220154, 0.44212509, 0.11025773],\n",
              "       [0.2741383 , 0.43519856, 0.1030822 ],\n",
              "       [0.29329948, 0.45505227, 0.14764042],\n",
              "       [0.300463  , 0.41946228, 0.11495312],\n",
              "       [0.3035299 , 0.40914041, 0.10625931],\n",
              "       [0.31723868, 0.37407737, 0.08214843],\n",
              "       [0.32204211, 0.36414216, 0.07774027],\n",
              "       [0.44898076, 0.22029808, 0.1946735 ],\n",
              "       [0.14263297, 0.52914465, 0.13937312],\n",
              "       [0.10908079, 0.58394658, 0.21559561],\n",
              "       [0.15825746, 0.5037631 , 0.11361037],\n",
              "       [0.17646209, 0.48251156, 0.09583477],\n",
              "       [0.18432182, 0.47460294, 0.09079871],\n",
              "       [0.66164443, 0.17336662, 0.39658225],\n",
              "       [0.65324735, 0.18884628, 0.39022702],\n",
              "       [0.61918805, 0.18288558, 0.35576943],\n",
              "       [0.13016305, 0.75312153, 0.3783659 ],\n",
              "       [0.08921093, 0.58419779, 0.19383001],\n",
              "       [0.13099541, 0.74891192, 0.37550622],\n",
              "       [0.09096236, 0.57884563, 0.1884474 ],\n",
              "       [0.09422586, 0.57161871, 0.18133006],\n",
              "       [0.07278853, 0.63413168, 0.2591692 ],\n",
              "       [0.20470672, 0.46827666, 0.08242817],\n",
              "       [0.14717608, 0.51324152, 0.12382729],\n",
              "       [0.33335078, 0.33383321, 0.06460817],\n",
              "       [0.34234744, 0.32156246, 0.07161891],\n",
              "       [0.39852695, 0.2619563 , 0.13794138],\n",
              "       [0.41138835, 0.251558  , 0.15403632],\n",
              "       [0.69806132, 0.13350592, 0.42877226],\n",
              "       [0.70752104, 0.12395134, 0.43752119],\n",
              "       [0.4195746 , 0.24550634, 0.164225  ],\n",
              "       [0.6982673 , 0.11098325, 0.42791986],\n",
              "       [0.62285196, 0.07980675, 0.36273456],\n",
              "       [0.55032017, 0.26646443, 0.340584  ],\n",
              "       [0.57843901, 0.21676984, 0.35095299]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km3_scaled.labels_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "66UJR9enfWKb",
        "outputId": "131beaef-9ac7-4855-e03e-a31c41735c3d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 2, 2, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1,\n",
              "       1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0,\n",
              "       0, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "       2, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1,\n",
              "       2, 1, 1, 1, 1], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X[:, 0], X[:, 1], c=km3.labels_)\n",
        "plt.scatter(km3.cluster_centers_[:, 0], km3.cluster_centers_[:, 1], marker = \"X\", color=\"red\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "pVBbDXjCgMA6",
        "outputId": "6fea9c11-57cf-420f-9474-bceba31f61c0"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=km3_scaled.labels_)\n",
        "plt.scatter(km3_scaled.cluster_centers_[:, 0], km3_scaled.cluster_centers_[:, 1], marker = \"X\", color=\"red\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "pwMyVYbjfol1",
        "outputId": "740d0ae1-08c3-4e94-ed40-7cd2d99c0243"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiMAAAGdCAYAAADAAnMpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABk0UlEQVR4nO3dd3gUVRcG8PfOtvTeKKFLbxogFFHUKDYUVAQbiAULKIINPkHs2MWCoih2BUHBhqAgoBSl9yaEDgmEQHq2zf3+2CRkye5mN9mS8v6eJw9k5s7M2Ul0DnfuPVdIKSWIiIiIAkQJdABERERUvzEZISIiooBiMkJEREQBxWSEiIiIAorJCBEREQUUkxEiIiIKKCYjREREFFBMRoiIiCigtIEOwB2qquLYsWMIDw+HECLQ4RAREZEbpJTIy8tDw4YNoSjO+z9qRTJy7NgxJCcnBzoMIiIiqoLDhw+jcePGTvfXimQkPDwcgO3DREREBDgaIiIickdubi6Sk5PLnuPO1IpkpPTVTEREBJMRIiKiWqayIRYcwEpEREQBxWSEiIiIAorJCBEREQUUkxEiIiIKKCYjREREFFBMRoiIiCigmIwQERFRQDEZISIiooCqFUXPiKh225t9ClszM6HTKOjZuAniQkICHRIR1SAe94z89ddfGDBgABo2bAghBObPn1/pMcuWLcMFF1wAg8GAVq1a4bPPPqtCqERU2xzNy8Ut38/GFV99hkf/+A0PL/wVvWd+iP8t+R3FFnOgwyOiGsLjZKSgoABdunTBtGnT3Gq/f/9+XHPNNbjkkkuwadMmPPLII7jnnnuwaNEij4MlotrjVGEhBs/5FuuOHbXbblFVfLdjGx749SdIKQMUHRHVJB6/prnqqqtw1VVXud1++vTpaN68Od544w0AQLt27bBixQq89dZb6N+/v6eXJ6Ja4ostG3GioACqg4RDlRLLDx7AqiOH0Ce5aQCiI6KaxOcDWFevXo20tDS7bf3798fq1audHmM0GpGbm2v3RUS1y3fbtzlMREpphMAPO3f4MSIiqql8noxkZGQgMTHRbltiYiJyc3NRVFTk8JgpU6YgMjKy7Cs5OdnXYRKRl2UXFbrcb5USmfn5foqGiGqyGjm1d8KECcjJySn7Onz4cKBDIiIPxYWEutyvEQINwsP9FA0R1WQ+T0aSkpKQmZlpty0zMxMREREIDg52eIzBYEBERITdFxHVLkM6dIIihNP9VikxuH1HP0ZERDWVz5ORXr16YcmSJXbb/vjjD/Tq1cvXlyaiABre5Xw0Co+AxkFCIgD0b9kK3Rs28n9gRFTjeJyM5OfnY9OmTdi0aRMA29TdTZs24dChQwBsr1iGDRtW1v7+++9Heno6nnjiCezatQvvv/8+vvvuO4wdO9Y7n4CIaqTIoCDMGTwU/Zo1R/l0xKDR4K7zU/D2lddCuOg5IaL6Q0gPJ/ovW7YMl1xySYXtw4cPx2effYY777wTBw4cwLJly+yOGTt2LHbs2IHGjRtj0qRJuPPOO92+Zm5uLiIjI5GTk8NXNkS10NHcXGw7mQmdokG3ho0QYTAEOiQi8gN3n98eJyOBwGSEiIio9nH3+V0jZ9MQERFR/cFkhIiIiAKKyQgREREFFJMRIiIiCigmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAcVkhIiIiAKKyQgREREFFJMRIiIiCigmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAcVkhIiIiAKKyQgREREFFJMRIiIiCigmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAcVkhIiIiAKKyQgREREFFJMRIiIiCigmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAcVkhIiIiAKKyQgREREFFJMRIiIiCigmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAaUNdABERER1TUZ+HradyIQiFHRr2BARhqBAh1SjMRkhIiLykuyiQkz8czF+T98LVUoAgF6jwS0dO2N8n4tg0PKx6wjvChERkRfkm0wYMnc2Dpw5XZaIAIDJasUXmzfhUM4ZzBgwCIoQAYyyZuKYESIiIi/4dttmpJ/OhrVcIlJKQmLpgf1YcehgACKr+ZiMEBERecGsbVtRMQ05SyME5uzY5rd4ahMmI0RERF5woiDf5X6rlDiWl+unaGoXJiNEREReEBsc4nK/RggkhIb6KZrahckIERGRFwzu0Mnl4FSrlLipXUc/RlR7MBkhIiLygts7dUHDsHBoHCQkihBIbdQY/Zo1D0BkNR+TESIiIi+IDArCd4OHIrVxst12RQhc36YdPh4wCBqFj11HWGeEiIjIS5LCwvHVoMFIP52NTRnHoVEU9GyUjMSwsECHVqMxGSEiIvKyFtExaBEdE+gwag32FxEREVFAMRkhIiKigGIyQkRERAFVpWRk2rRpaNasGYKCgpCamoo1a9a4bD916lS0adMGwcHBSE5OxtixY1FcXFylgImIiKhu8TgZmT17NsaNG4fJkydjw4YN6NKlC/r3748TJ044bP/NN99g/PjxmDx5Mnbu3IlPPvkEs2fPxv/+979qB09ERES1n8fJyJtvvol7770XI0aMQPv27TF9+nSEhIRg5syZDtuvWrUKffr0wa233opmzZrhiiuuwC233FJpbwoRERHVDx4lIyaTCevXr0daWtrZEygK0tLSsHr1aofH9O7dG+vXry9LPtLT07FgwQJcffXV1QibiIiI6gqP6oxkZWXBarUiMTHRbntiYiJ27drl8Jhbb70VWVlZuPDCCyGlhMViwf333+/yNY3RaITRaCz7PjeXqxwSERHVVT6fTbNs2TK89NJLeP/997Fhwwb88MMP+PXXX/H88887PWbKlCmIjIws+0pOTnbaloiIiGo3IaWU7jY2mUwICQnB3LlzMXDgwLLtw4cPx5kzZ/Djjz9WOKZv377o2bMnXnvttbJtX331FUaOHIn8/HwoDur0O+oZSU5ORk5ODiIiItwNl4iIiAIoNzcXkZGRlT6/PeoZ0ev1SElJwZIlS8q2qaqKJUuWoFevXg6PKSwsrJBwaDQaAICzPMhgMCAiIsLui4iIiOomj9emGTduHIYPH45u3bqhR48emDp1KgoKCjBixAgAwLBhw9CoUSNMmTIFADBgwAC8+eabOP/885Gamoq9e/di0qRJGDBgQFlSQkRERPWXx8nIkCFDcPLkSTz99NPIyMhA165dsXDhwrJBrYcOHbLrCZk4cSKEEJg4cSKOHj2K+Ph4DBgwAC+++KL3PgURERHVWh6NGQkUd985ERERUc3hkzEjRERERN7GZISIiIgCiskIERERBRSTESIiIgooJiNEREQUUB5P7SWiuk+VEuuOHcXh3BxEGYJwYZOmMGi1dvvXHD2Co3m5iAoKwoXJ9vuJiDzB/3sQkZ0Vhw7iqT//wOHcnLJtEQYDxvXsgzs6dy3bfyTv7AKWkQYDHu11IW7v3DUAERNRbcdkhKgGkFLiSG4uzKoVjcIjHPYy5BQX42RhAaKCghEXEuKTONYcPYIRP34P9ZzqQ7lGI55Z/if+yz6Fb7dtqbCUQ47RiKeXLYFVqhje5QKfxEZEdReTEaIAklJizo5t+GDdGhzMOQMACNcbcGunzni4Ry8E63TYf+Y03li1Agv3/Qe1JAm4MLkJHu11IbokNfBqPFNWLIcEIOG4FuI3Wzfb4nZy/GsrV2Bw+04I0em8GhcR1W0cwEoUQG/9swrjl/yOQyWJCADkmYyYsWEd7pg/FztOZmLQrK+xqFwiAgCrjhzG4LmzsPrwIa/FcuDMaWzOzLC7zrkknCciAFBoMeOP9L1ei4mI6gf2jBAFyJ5TWXhv7T8AKj7gVSmx8fgxjF7wCwrMJljPSRBKE4bHFy/EX3feC0UI7Ms+hZmbNuC3vXtgtFjQOjYOw7ucjwGt20KjOP93R77JhG+2bsanmzZU+zMJACcLCqp9HiKqX5iMEAXIrO1boRGiQqJRSgI4UK7H5FyqlDiWl4dVJb0j9/w8D1ZVLTvf1hOZGPf7b/gjfS/eufJahwlJdlEhhsydjf1nTrvsEXGXBLAlM6Pa5yGi+oWvaYgCZP/pbKeJiLsEgN1ZJ/HArz/BbLXana80uVi49z98tXWTw+MnL/sTB7yUiJT65b/dWHfsqNfOR0R1H5MRogAJNxigCFGtc0gAe7JPocBscjmWY+bGDRVmwJwoyMdve/dUOyE6l0YIfL55o1fPSUR1G5MRogC5ulUblz0SGiEQXEkhMb1GA7PVCo1w/p+yBHA4Nwd5JqPd9u0nT3i1R6SUVUpsOH7M6+clorqLyQhRgKS1aIm2cfHQOOgdUYSAXqPBqO6pTo8XAO4+PwXBOh3c6WA5N2HRukhgqkujVK/Hh4jqFyYjRAGiVRR8MfAmdEm01QrRCAFtySDTmOBgfDloMB7s3hNP9e0HnaJAANApChQhoAiBEV0vwLiefXBR02awqKrT6yhC4PykBgjV6+22n9+gIYJ8UMJdIwTSmrf0+nmJqO7ibBqiAIoLCcGcwUOxOTMDSw+kw2xV0SkxEWnNW0Kn0QCw9X7c0LY9ft6zC8fy8xAbHIxrz2uLBuHhAIDLmrdEckQkjuXlOhz/oUqJ+1K6V9geptfjjs5d8fGGdS7Hm3hCABBCsCw8EXlEyHNHtdVAubm5iIyMRE5ODiIiIgIdDlG1FZnNyDEWI9IQhGAvVCvdf+Y0bvvhO2Tk50PANk6kdNrw470vxAPdHL/uMVmtGLPwVyza95/LacalFCGgSommkVHILMiHyWotG3eiCAGNUDDt6muR1qJVtT8TEdV+7j6/mYwQ+dH+M6fxzr+r8et/u2FRVWgVBdec1wYPp/ZC86joap270GzGz3t24fd9/6HQbEa7uHjc0rELzouNdXmclBL/HDmMOTu24WheLmKDQ9A4IhL7T2cj12hEVHAwpJTIMRYjJjgYA1q3w+UtWiLHaMR327di1eFDkJBIbZSMIR06ITEsrFqfg4jqDiYjRDXMrqyTuHnuLBSZzXY9EBohEKLT4bvBt6BNbFwAIyQi8i53n98cM0LkJ08uXlQhEQFsU2ELzWY8uXgR5g+5LUDREVF9c/DMGXyxZSMW7fsPJqsVHeMTcUeXrujXtDlENWsgeYrJCJEf7Dx5AltPZDrdb5USWzIzsCvrJNrGxfsxMiKqj1YcOoh7f54HS7klJP4+dADLDu7HsM5dMfniS/2akHBqL5Ef/Jd9yq12e91sR0RUVbnGYtz/648wnbOEROnfv9iyCT/t2eXXmJiMEPlBiJszZkJ0+sobERFVww87d6DIbHY6pV8RAp9uXO/XmJiMEPlB7+SmCNa6TkhCdTr0apzsp4iIqL7acPyYy1cwqpTYciLTZTFFb2MyQuQHITqdw8Jj5d2X0sMrNUeIiFxxZyyIKPnyFyYjVK+oqorf9/2H6evW4Pd9/7l9XKHZjDVHj+CfI4eRayyu0rVH9+iJu7qmQOBs6XeNEGVrzDzoYh0aIiJv6d042eUimYoQ6N6wMTSK/1IEzqaheuPjDevwxuoVMFqtZduCNBo81rsv7jo/xeExJqsVb/6zEl9u3oQiixmAbaXcG9t1wP8uvLjCei+uKEJg4kX9MLzL+Zi3awdOFBYgMTQUg9q2R+OIyOp9OCIiN13Xph1eXfU3coxGh0mJKiXuTenm15hY9IzqhQ/W/YvXVq1wun98n74YmdLDbpsqJe77ZT7+3J9eYaCXIgQ6JyTi2xuHwOCDxeaIiHxp64lM3DFvDvKMJsiS/8OVLgnxWK8LvdZT6+7zm69pqM5TVRVv/bPKZZvXV6+Ees5greUH92OJg0QEsCUqmzIzMH/XDi9GSkTkH50SEvHnsLvwZJ++OD+pAdrFxeOm9h3x89DbA/LKmP+kozrvm21bKh0VblFVzN6xDbd07Fy2bfa2rS4XjxMl5x5S7hgiotoiJjgEI1O6Y2Qlg+v9gT0jVOftOZVVpXaHcnNcrmIrARzJzalOaEREBCYjVA8khYW71S4x1H612fiQECiVTIGLCQ6pclxERGTDZITqvDu7nF/pfHkB4M6uF9htG9S2vcvpbwICN7XvUP0AiYjqOSYjVOeF6PW4sX1Hl20Gt++IoHNmxVzVqjXaxsVD46B3RCMEksLCMLQDx4sQEVUXkxGqF15N64/r27RzuG9Qm3Z4Oa1/he0GrRZfDxqMvk2aArCvSNglsQG+GzwUkUFBPoqYiKj+YJ0RqlfOFBfhvTX/4GheHhqFh2N0j56ICgqu9Lj009lYfeQwVCmR0qAh2scn+CFaIqLazd3nN5MRIiIi8gkWPSMiIqJagckIERERBRSTESIiIgooJiNEVLMZjcDSpUDp8DYpbd8bjYGNi4i8hskI1RkmqxU/7d6JO+d/j2u++QL3//Ijluzf57JwGdVwRiMwcCBw6aXA2LGAqgKPPGL7fuBAJiREdQRn01CdkFNcjDvmz8G2EyegCAFVyrJF7vo1bY4PrrkOBi3XhaxVShOR33+3JSEA0KULsHmz7e+KAlxxBTB/PmAwBCpKInKBs2moXnli8ULsPHkSAMp6QkoXuVt+8ABeW7UiYLFRFa1aBSxceDYRAc4mIoBt+8KFwOrV/o+NiLyKyQjVeodzcrA4fZ/TFXYlJL7Zthn5JpOfI6Nq6dcPePhh123GjAEuvtgv4RCR7zAZoVpv9ZFDqOxdY7HFgk0Zx/0SD3mJEMBbb9lezTjSpQvw5pu2dh7YmXUSP+zcjgX/7UZOcbEXAiWi6uJLdKr13B2gWguGR1F5UtoGrZZ/NVPe5s3AuHG2hMWNhCT9dDYe/f03bM7MKNum12hwe6cueLLPRdBpNN6KnIg8xJ4RqvUuaNCw0jZaRUHHhEQ/RFN7nSkuwt7sUzhVWBjoUGyWLQPeecd1m7ffBpYvr/RUR/NycdOcb7HtRKbddpPVik83bcCTixdVI1Aiqi72jFCt1zo2Dj0aNcb6Y0cdjhvRCIGBbdohOrjyBfHqo33Zp/DG6pX4PX0vVCkhAFzYpCke690XnQKZwPXuDVx5ZeWzaXr1qvRUH65bgzyj0eHvhwQwf/dO3H1+CjowYSUKCPaMUJ3w1hVXo0FYOBSc7a4v/Vu7uHhMvOiSwARWw+0+lYWBs7/BHyWJCGB7OK86fAiD53yLtceOBC44g8E2bfeKK2zfjxkDbNhwdlCrm9N6VSnx/c7tTgc4A7aE9YddO7wTNxF5jD0jVCc0CA/HL7fegVnbtmLOjm04VVSIhuERuKVjZ9zYrj2CtLpAh1gjTfzzDxRbzBUe1FYpIVUVj/+xEEuH3Q3h4SBRrylNSFavts2aEQKYOhUYNMjWI+JGfZFiiwVFFovLNhLAycICr4RMRJ5jMkJ1RoQhCCNTumNkSvdAh1IrpJ/Oxvrjx5zuV6XEoZwcrD12FD0aNfZjZOcwGGzTfEsJYf99JYK0WoTq9CgwO5/aLQAkhYZVOUQiqh4mI0T11P7Tp91slx3YZKSaFCEwuENHfLl5o9NXNVYpcUO7Dl6/9t7sU/h22xbszDqJEK0OV7RshQGt2yJYx546ovKYjBDVU+FullAP09f+Uuv3XdAdv+zZhdNFRQ4TkiEdOqFtXLxXr/nh+jV4ZeXfZcsSCAj8eSAdb/+7Gt/ccDOaRkV59XpEtRkHsBLVU+cnNUBscIjLNkFaLS5q2sw/AflQYlgYfrj5VqQ2TrbbHqLT4aEePfHCJWlevd4f+/bilZV/Azi7LIEsKc13oiAfw3+cC0v5MvdE9VyVkpFp06ahWbNmCAoKQmpqKtasWeOy/ZkzZzBq1Cg0aNAABoMBrVu3xoIFC6oUMBF5h06jwSM9e7tsM/KC7m73oNR0jSMi8dWgwfhz2F344JrrMPO6G7DmngcwtmcfaBTv/rts+vo1UJwM+rWWjMVZuj/dq9ckqs08fk0ze/ZsjBs3DtOnT0dqaiqmTp2K/v37Y/fu3UhISKjQ3mQy4fLLL0dCQgLmzp2LRo0a4eDBg4hiFyVRwN3asTPyTUa8sXolrKoKraKU/Uv+nvNT8HBq5TU8aptmUdFoFhXts/MXmEzYWMnSA1pFwfJDB3B5y1Y+i4OoNvE4GXnzzTdx7733YsSIEQCA6dOn49dff8XMmTMxfvz4Cu1nzpyJ7OxsrFq1CrqSQVvNmjWrXtRE5BVCCNyX0gOD23fEz3t24Xh+PuKCQ3Bt6zZICgsPdHi1klVW/vpFSsBitfohGqLawaNkxGQyYf369ZgwYULZNkVRkJaWhtVOlvH+6aef0KtXL4waNQo//vgj4uPjceutt+LJJ5+ExslaEEajEUajsez73NxcT8IkIg/FBIdgeJcLAh1GnRCuN6BxRASO5uY6XcDRKlV0Tkzya1xENZlHL0qzsrJgtVqRmGhfMjkxMREZGRkOj0lPT8fcuXNhtVqxYMECTJo0CW+88QZeeOEFp9eZMmUKIiMjy76Sk5OdtiUiqkmEELira4rz/QBCdXpc36ad/4IiquF8PptGVVUkJCTgo48+QkpKCoYMGYKnnnoK06dPd3rMhAkTkJOTU/Z1+PBhX4dJROQ1t3fuiitangcAdgNZNUJAp9Hg/WsGIFSvD1R4RDWOR69p4uLioNFokJlpv/JlZmYmkpIcdzk2aNAAOp3O7pVMu3btkJGRAZPJBL2D/yANBgMMdWQEPxHVP1pFwXtXXYv5u3fii80b8V/2KRg0Wlx9XmuM6HoBWsXEBjpEohrFo2REr9cjJSUFS5YswcCBAwHYej6WLFmC0aNHOzymT58++Oabb6CqKpSS6XN79uxBgwYNHCYiRER1gUZRcGO7DrjRB5Vdieoaj1/TjBs3DjNmzMDnn3+OnTt34oEHHkBBQUHZ7Jphw4bZDXB94IEHkJ2djTFjxmDPnj349ddf8dJLL2HUqFHe+xRERERUa3k8tXfIkCE4efIknn76aWRkZKBr165YuHBh2aDWQ4cOlfWAAEBycjIWLVqEsWPHonPnzmjUqBHGjBmDJ5980nufgoiIiGotIaWTlaNqkNzcXERGRiInJwcRERGBDoeIaiirqmLZwf3YnZWFYJ0Oac1bIjkyMtBhEdVb7j6/uVAeEdUJa44ewZiFvyKzIB8aIaBKiRf+WoprzmuDV9L6c6VcohqMyQgR1Xq7sk5i+Py5MJcsPld+Zd4Fe/egyGLGjAGDAhUeEVWCq/YSUa03be2/sKgqVAdvnVUpsWR/OjZnOi7MSESBx2SEiGo1o8WChXv32PWGnEsrFPy8e5cfoyIiTzAZIaJarchidpmIAICERI6x2E8REZGnmIwQUa0WrjcgrJICihJAcgRn1RDVVExGiKhW0ygKhnboBE25NWDOJaXEje1ZCZWopmIyQkS13v3deqBheITThGRszz5oFM4aRUQ1FZMRIqr1YoJDMPfmWzCgdVtoy1WAbhQegSmXXYHRPXoGMDoiqgwrsBJRnXKmuAgHz5yBQatF69g4KC5e3xCRb7ECKxHVS1FBwYhKCg50GETkAb6mISIiooBiMkJEREQBxWSEiIiIAorJCBEREQUUkxEiIiIKKCYjREREFFBMRoiIiCigmIwQERFRQDEZISIiooBiMkJEREQBxWSEiIiIAorJCBEREQUUF8ojIqrlrKqKw7k5kACSIyKhVWrWvzNziotx4MxpmFUVTSOjEB8aGuiQqkxKiSO5uTCrVjQKj4BBy8eoN/AuEhHVUqqU+HTTBny8YR0yC/IBALHBIbiz6wW4L6V7wJOS9NPZeP6vpVh+8IDd9vZx8Zh00SVIbZwcmMCqQEqJ73Zswwfr/sWhnBwAQLjegNs7d8FDPXoiSKsLcIS1m5BSykAHUZnc3FxERkYiJycHERERgQ6HiCjgpJR4cvEizN25vcI+ASCtRSu8f/UAaAKUkOw5lYUbvvsGhWazw/0CwPRrrsflLVv5N7Aqem3V3/hg3RoIAOUfmooQSGnQEF8MvIm9JA64+/yuWX15RETklpWHDzlMRADbw/KP9L1YtO8//wZVzqSli1HkJBEBbDE+sXghjBaL/4Kqop1ZJ/HBujUA7BMRwNY7te7YUczevtX/gdUhTEaIiGqhb7dthkYIp/sVIfD11s1+jOis9NPZWHvsaIUH97lyjEYs2b/PLzFVx+xtW1zeawD4cssm/wRTR7FPiYhqjVOFhfhux1b8dfAAMvPzIQEkhIaiV+MmGNqxE5LCwgMdot/sOXUKVhdv2VUpse90th8jOuvAmTNutVOEQPrp074Nxgv2nc52ea8lgEM5Z/wWT13EZISIaoWVhw9i5M/zUXROt/7BnDNYd+woPlj3L9656lr0b3legCL0r0hDUIXxC+cK1xv8FY79dQ16t9qpUrrdNpAiDUFQhIDqIiEJ0XEAa3XwNQ0RlckqLMRnmzbg1ZV/47NNG5BVWBjokAAAx/Jycc9PFRORUhKARVXx0G+/4L9Tp/wbXIBc16aty/2KELi+TTs/RWPv/KSGiAsJqbSdAHBFi5qfPF59XmuXiYhGCFwXoHtdVzAZISJIKfHumtXo9cl0PP/XUny8cR1e+GsZen0yHW//uwqBnnT37bYtMKtWl20kbJ/j8y0b/RNUgA1q2x6JYWEOxzJohECUIQhDO3YOQGSAVlEwtmefStsN7dgZDcJr/qu1y1u0QuvYOIf3WhECBo0Wd3VNCUBkdQeTESLCzE0b8NY/q2CVsqyXQYWEVUq8/e9qfLxxXUDjW5y+z+W/TEtZpcSS9Jo/INIbwg0GzLpxCJpHxwAAtEIpqyvSKDwC3944xK3eCV+5pWNnjO9zkdOBn4PbdcAzF1/q56iqRqfR4MtBN6FzYhIAW7JXeq/jgkPw5aCb0DQqKoAR1n6sM0JUzxktFqR+Mh25RqPTNuF6Pf695/6AFXa6/MtP3R6MGRscgrX3PuDjiGoOKSVWHzmM1UcOQUqgW8NGuKhpMyiVzP7wl9NFRZizYxtWHj4Es2pF18QkDO3YGU0iowIdmseklNiUcRzLDu6H2aqic2ISLmveAjqNJtCh1VjuPr85gJWonvvnyGGXiQgA5JlMWHX4MC5t3sJPUdlLadAQB86cdjmjAbD9i/X8pAZ+iqpmEEKgd3IT9E5uEuhQHIoODsbIlO4YmdI90KFUmxAC5zdoiPMbNAx0KHUOX9MQ1XN5JteJiKftfOGOzl0rTUQA22ua4V3P90NERORNTEaI6rnmUdFebecLHRISMbFvPwC2GRjnKt32UI+e6JPc1F9hEZGX8DUNUT3XPj4B7eLisftUlsNBoooQOC8mFp0SEgMQ3Vl3nZ+C9vEJmLlxPf4+dABmqwohAI2ioEejxrirawr6NWse0BiJqGqYjBDVc0IITLnsCgz9fjbMVqvd6xDbrAENXr7sCogaMCCyZ+Nk9KxFK70SkXuYjNRiUkrAvA6yaD6gZgOahhDBN0Lo2js9RrUcBPJeAszbASiAPhUIewLCuhuy+BdAzQE0TYDggYBxJVA0F5B5gBIPhN4DEXQ1hPDs7Z60ngSK5kKatwFCB2HoB2m4BMK4BNL4FyDNELrOQPBNEJrYat0TckxKK2D8C7L4N0DmA9rmEME3Q2htrzQ6Jybh+5tvxRurVmDpgXRI2F59XNS0GR7rdSHaxScENH4iqts4tbeWkrIY8vRDgGk5AA0A69k/g2+GiHgWQthPN1Pz3wPy33Fx1tLzKABUJ02aQcR+D6G4V6hIFv0CmfNEyflKH3FquWso5bZrIKJehwi6yq1zk3ukmg2ZfRdg2QH73xUVIuwRiDD7abDZRYXIKixEbHAIYgNYp4KIaj93n98cwFpLyZxnANPfJd9Z7f8s+g4omG7XXi1eXkkiUv48ThIRALAegDx9r3sxmjZD5jwGwIKzyUjpucv/WbrdAnlmrK0HhbxCNW2GzLoRsOws2VL+d0VC5r8FWfST3TExwSFoHRvHRISI/IbJSC0krZlA8Xy4ShpkwSeQsvjshvxXvReAeQOkJb3SZrLgYzie++D0CAACsmBmVSOjEtJ6DGrWjUD2YEA9CufLqQnI/A8CXu6diOo3jhmpjYwr4bL3ArCNCzBtBgyptu8t3i2RLYuXQoRVUgDLuAxn/yXuLitgXFLFqAApiwDzNkBaAV1bCCWq3D4LYN4KyCJA2xJCE9jZIeVJNQcw7wSEBtB2gFBCztl/BjDvsu3XdYQQwZDqacC8u2RbJwgRVNI2HzL7NsCa4c6VAes+QD0OaFjIqVSusRg7Tp6EIgQ6JiRyRVYiH2MyUiuZqtDO2//ydV0Ay/YvbXPVTi09P05KM2T+u0Dhl4AsKNmqgwweCISNhyieB1kwHVCzSvYJSMNlEBGTIDSBq9gp1XzIvFeAonko+3mJEMiQ2yDCxgDSBJk3BSiaj7P3MwRS0xiwpsP2CgyACIMMGQ4RNgoo+gGwHoNHP3Pp7u9U3ZZvMmHKiuX4fud2mKy2RDpEp8PtnbtiXM8+0LPsN5FPMBmpjbTuLFWtANrWZ78VkYA847UQhK6T6/1CQGrbAJbdqLQXx44CaJ3PBnJESgl5Zhxg/B32D2AzUPQ9ULwUUmadexRgXAp5ajMQOw9C4//ZIlIaIbPvBCzbYHePZCFQ8DGk+T9APVky3qP8PSwErHvOOVk+UPA+pPUQYN7vWSAijL0isK3RM2zeHGw5kWlXb6XQbMaM9WuxL/sUPrx2YI1Z84WoLuGYkdpI1xnQtoVtRoQjGsCQZv8aIuR2711fRAH6ypcHFyHD4VkiAgAqROgdnh1iWgUYF8FxT4AKVEhESlkBNRuy4EMPY/SSonmAZQsc3yMJmJYBlu1O9jsigeKfAXkC7veKKEDILRBC72b7umverh3YlJnhsPCbBLBkfzqWH/Qw0SMitzAZqYWEEBBRbwIiHBUTEgXQNICImGy/OXQ0oGnj6qxuXl0DRM9wr9ZI8EAg6BoH5y/9e/lzlPw96HogaICbsdjIorlwnphVxmqrgSItVTy+6mThLHg2wNcdpffBnf+0hW2sSegoL8dQO327bYvLn4ZGCMzettVv8RDVJ0xGaimhbQUR96Otx0OE2TYqsUDoA7Y6IJp4u/aKogCxPwJBNwEoPxhPA4gkQISi7MGoxANBNwKa8qW1BaDrDsT+CkXfxb0YhQIR+QZExEslr4xstURguAQInwgYLrZ9DwFo20BEvAwR+YrHRdVgPQzPB8qWI4sAmVv146vK03Ed7p0UEBGotDdFiYEIfxwi5ssKg2XrqyO5uS5/GlYpcSg3x2/xENUnHDNSiwlNA4iIp4CIpyCltUKRswrtrTsgjYtg/+C2ArL8rAsByHyIkBsg9FNs4zGkGYpStW58IRQg5CaIkJtsVUChnC0rHjqsZKCr9DwBKU+JhctCbZXSnk3o/EmJBqxnvHxSDaBtBWiTS2YzOXi86i6CiPmw0t+X+iYmOBini4uc7leEQFwwEzciX2DPSB1R2YNFSqOtWJksgOuHtgSkEfL0fZBqPoQQVU5E7M5qPQUUzITMeRJqzjOQxhWQsiQO8zqouc9BPfM4ZP77kG5NST1LBF2PqiciGiDoqoCMmRDBg1D5f4KevsaxQgQPhIh6Fwi93z7JEmFA6H0QMe8zEXHgxnYdIFzcb1VK3NDOs8HVROQe9ozUF8ULAfWUm41VW9JSNA/wdDCpA7Lwe8jcSbbzQgAQkEXfAJp2gBIEmDfC9qsoISFtlWLDx0OE3uneBYIuBwo6lsw6Ofd1jabk3CZU7CVQAOgqlEP3m5ChQOG3gHoCDuPWtABkTsnPzZ3XULZ6IzBcDCE0EOFjIcMeBCz/2XZrW5XVIqGKbunYGV9t3YTM/Hy7xQIB23iR82LjcFWr1k6OJqLqYM9IPSFNa+BZ7ikgTWurf13jSsjc/+FsSXgrympjWHeWJCIo2WYtaaNC5r0EtfAH2xo8xQshC76ELF4EKSvWNxFCBxHzackYFFvsZT0Kug62sTLBN+Psr3vJPk1j25gJbatqf04AkFK1fd6CryCL5tmKkpXtk5CmtbZ9hXMhrSchlCiI2G9sCcS5cesvhIj9GiLmW9tnOHd/WY+HOPun4TKI6Jl2vR5CGCB0HW1fIgjSvAOy8BvIwlmQlkNe+dx1RWRQEGbfNBRdEm11Z8rdbfRt0hRfDxoMg5b/fiPyBS6UV0+oOU+VFNZyd9aIAAz9oURXtp5NJdc9dQdgXotqjeeAxRYPJCAiICL+BxF8g8PW0nIQMK0GpAXQnw9R9iAvWT3YuLykAut5gD717PiVapKmtZBnHgfUY2djhRYIGQ4EXQXkPA5Y95fbpwDBg21F14Qe0rwDMG2wVVPV94TQNrc/v3kbYNoECC2g72VbWdmyFTBtKdnWB0Kb7Dw+yxHInLGAeXO5rSUJTOTLEAr/uypvx8kTWH/8GBQh0KtxMlpExwQ6JKJayd3nN5ORekIW/QiZ87gHRwiI8KcgQodV/ZpqPuSJC6p8vCsi8nWI4Ot8cm5PSfNWyFNDcbZn51xalPb42FNKEr63fRufmg2ZdX1J9VkHr4O0HSBiv4UQLHlORN7FVXvJXtCVgBID937kim2qb/Cgal7UdyXGZd6rJbNzAk/mvQ3HyUYpi5N9KmD8DdK83WexASgZl3ISjsedWG2F16qxHhARUXVVKRmZNm0amjVrhqCgIKSmpmLNmjVuHTdr1iwIITBw4MCqXJaqQQgDRPSMknoirn7sCgADRPSHEEp4NS8aWZIA+YB6AjCv9825PSDVM4Dpb1S9zokGsugnL0ZUkSz6Hq5fkymQRfN9GgMRkSseJyOzZ8/GuHHjMHnyZGzYsAFdunRB//79ceLECZfHHThwAI899hj69u1b5WCpeoSuE0TcQoiw0bYiZJrGgK4boEsFlMaApiUQOhIifiGEvnv1ryc0ECG3wWcdcGq2b87rUQw5qHbhMl9/DvVMZQ3KLSBIROR/Hj8l3nzzTdx7770YMWIE2rdvj+nTpyMkJAQzZ850eozVasVtt92GZ599Fi1aVLLsPPmU0MRDhI2GEvcLlPg/ocR+AyX2SygJf0KJ/w1K+DjvrmIbeo9tLZ0Kv2ollVerk6gogVtt92wMsaj2DHlfL1KnaQDX9Uo0tmSUiChAPHoSmEwmrF+/HmlpaWdPoChIS0vD6tWrnR733HPPISEhAXfffbdb1zEajcjNzbX7otpJiGCImC8gwsbYyszbttqmrsZ8DRE7FxDxLs/h4Ky2Ghy6zt4O12NCCbPNlqnG2jgi+EZvhlSBCB5SeQwhg30aAxGRKx4lI1lZWbBarUhMTLTbnpiYiIwMx1UzV6xYgU8++QQzZsxw+zpTpkxBZGRk2VdysvMpi1TzCREEEfYARPwKiIQNEIlbocTMgNB3s9W/iP0CQAjcHlwLBSLiGa9Ny60uETampO6Hk4TE1b7QeyG0TXwVmk3IYEDbzkkMAjBcAeh7+zYGIiIXfDqbJi8vD3fccQdmzJiBuLg4t4+bMGECcnJyyr4OHz7swyjJX4QQEEpYhdLrQtsSInYOcO44FREDKEn227RtIGI+hzD09HG07hPaJiXxnxOTkggR8QJE3ALb4oDlX5WIaIjwCRBhj/k+PhEMEfMlEDQQdq+URIgtGYp6q8YkdoF0srAAMzasxdNLF+Otf1Zib7a7FYuJqLo8etkdFxcHjUaDzMxMu+2ZmZlISkqq0H7fvn04cOAABgw4uyS8qtpG9Wu1WuzevRstW7ascJzBYIDBYPAkNKrlhO48iJgvbVVBrYdtvQm6TgAEYNltG2CpJELozgt0qA4JbTOImE8hLUcA60HbrCVdp7JqqCK6ZM0dyz5ABAG6zn6t6yGUcIioKZDqE4B5p61QmrYjV+wt8fGGdXhl5V+2cnRCQEqJd9f8g+vbtMMraf2h13AtHyJf8igZ0ev1SElJwZIlS8qm56qqiiVLlmD06NEV2rdt2xZbt2612zZx4kTk5eXh7bff5usXqkBomwDnvrbQtQ1MMFUgtI0BrePBoEKTBGgqJu3+JJRowMBXMuV9v3M7XlqxvOx7tVwdyJ9270SQVospl10RiNCI6g2PpwGMGzcOw4cPR7du3dCjRw9MnToVBQUFGDFiBABg2LBhaNSoEaZMmYKgoCB07NjR7vioqCgAqLCdyCmjEVi1CujXDxACkBJYtgzo3RtgDxpVgyol3v5nldP9EsCcHdswJrUXksKqWXeHiJzyeMzIkCFD8Prrr+Ppp59G165dsWnTJixcuLBsUOuhQ4dw/PhxrwdK9ZTRCAwcCFx6KTB2LKCqwCOP2L4fONC2n6iKdmedxJE817P1pJRYnL7PTxER1U9cm4ZqrtJE5PffbUkIAHTpAmwuWexNUYArrgDmz2cPCVXJumNHcfPcWS7baITA4737YmRK9QsBEtU3XJuGar9Vq4CFC88mIsDZRASwbV+4EHBR44bIlaZRUVAqmUlklRItY7hqL5EvMRmhmqtfP+Dhh123GTMGuPhiv4RDdU98SCj6t2wFjZOERBECCSGh6Ne0uZ8jI6pfmIxQzSUE8NZbtlczjnTpArz5pq0dURU91bcfYoNDKiQkGiGgEQJv9r8aGoX/qyTypWouqkHeJq1ZQNEcSNO/AASgPQ8w7wIsO20NdO2AsPFQ9O0DGqdfSGkbtFr+1Ux5mzcD48bZEpZqJiRSmoDihZDFvwEyH9C2hAgeAqFrV63zUs3XMDwCPw69He+sWY0fdu6A0WqBANCvWXM8nNobnRISKz0HEVUPB7DWINK4HPL0aABmuF7yHUDoKCjhY/wRVuAsXWqbNeNOu379qnwZac2AzB4GWA/A1lmowlY63QqE3g8RNpYVSusJo8WCU0WFCNcbEM5B0UTV5u7zmz0jNYS0HII8PQq2RMSN/LBgGlR9NyiGPr4OLXB69wauvLLy2TS9epUdIs1bAeMySGmG0HUADJe6rHQqpYQ8fZ+t6iuAs0mg1fZHwXRA2wwIvsGrH81dUs0HihdAWg9BiEgg6EoIra1YoJQSMG+ENK4AYIXQdQYM/cqqvpLnDFotGobX3X/wENVUTEZqCFn4DWwPQA86qvJeBQw/+iqkwDMYbNN2Bw60zZoZM8Y2RmTsWOCdd+ym9Uo1G/L0Q4B5LWy9GgISFkCJA6LehdCnOL6Gac3ZV2AOCcj8j4CgQX7vHZGF30PmPgvACEADCRXIfx0y+CYgdBSQ8zBg3gL7z9sAiH7flogREdUSfE1TQ6gnryh5TeAJDZQkVw/S6pOWfYAl3baomr47hNBDWk8B5s0ABKDvAqH4eNqj0WibvnvxxWcrsC5fbusRMRggpRXy1E2AZRfKejTKKAD0EHHzIbQtKpxazXsNKPgUgMVlCCL+L1s5dz+RxX9AnhnlIqAIQBbA4ecVIRBxv0BoGvoyRCKiSvE1Ta3j+mHomO/ySGnZC5kzETBvOLtRREBqmgCWHTj7OkMLGXQ9RMRECCXUN8EYDPZjQoSw/964HLBsd3KwCsAMWTATIvKFirvluQ9zJ2RVfj5VI6WEzH8btlV+nfyMpbOqoSogiyALvoCIGO+jCImIvIvz1WoK3QWwdbd7QPHNKH9pOQB5akhJ70f5HbmAZRvsB9dagOJ5kKdH2GakBIAsXgDX984KFP/scI/QdUKliaCI9u8Cd9YDgGUPqp5sWoHin7wYEBGRbzEZqSFEyO2o2OVeidD7fBKLzH8HkIUexKMC5k1A8UKfxFMpmY9KY5VFcPhGMuhyQImF8/8UBETo7RDCj52IMs8L5yio/jmIiPyEyUgNIfRdIcIeK/nOjR4SfW8oobd6PQ6pFgDFv8HjxAgKZOEcr8fjFk0zVHrPNI0dDkAVQg8R9T4gDOeco6StvpfPkj6nNI1Rvf80BaBp6q1oiIh8jslIDSLCRkJEfwro+wIi2DZoVNMKEJHlGkUDYeOgxHzmmyDU0/A8EQEAFVCPeTsat4iQwXAds4AIcZ64Cf35ELE/AyG32u4vDIC2NUTEcxDRMyCE3tshuySUGMBwBTx+bVdGuvy8REQ1DQew1jDC0AcikLVDlCicLfzlCQEoCd6Px50ra1tCho4CCqah4qBPBdB2BEJuq+QcTSAiJgERk3wZqttExJOQp9YC6hnYJ1ol/34wXAwYlzo4UgH0PQJWF4WIqCqYjNRhUs0BiuZBmtYDEBCGnkDQdRBKWLk2eUDRfEjTWgCA0HcD9P0A03J41kMiIYJvql68UgKmNZDFP9p6aDSNIIJvgtC1rfRYEfYwoEmGLPgAsB4s2RgKBA+BCHsIQgRXKzZ/E5pGQOz3kHlvAsULUDbIVomzvcYR0UDI7UDREkAeLzkoAgi5DSLsQb/35hARVQfrjNRR0rjSVqdCFpXfCogI26sH/fmQprW26qOyAPY9CkGwJSIWuNdDogG050HEzoEQVSuhLdVCW7ymlSgrxV76Z/BtEBGTIETlbxWllCXVVE2AJrnK8dQkqjUXyH8NKJqNCvdG2xWIeBpCCS75vExCiKjmcPf5zTEjdZCttPz9JYmILPcFQOZDnr4bqmkn5Ol7SmbNSNiSjtJ2RtgGQTY558wGQHPuUuoCMFwCEfNFtR78MncSYFpd8p3V/s+ir4GCj906jxDC9spF26pOJCIAIIwLShIRoMK9sWwF8t+C0LZkIkJEtRZf09RBsvBr2Ho1HHV6qbYEJO9FQBrhuOfDVigMhv4QQWmAZR+ghAD6CyGUMEjL4bPF0HQpENrG1YvXegwo/sVJvCVtCj4GQu+sdw9cKVXI/OkuWlgB09+Q5t0QujZ+i4uIyJuYjNRFxsVwPd5DLSlo5uoVjAoYF0NEPArou9jtEdpkoGSxNq8w/oVKC3zJM4B5G6C/wKNTSzUfMG+3VW3VtrcbLxMI0nrKVtBM6ABd58qTK+t+N2YpKZCF3wIRkzxeJE9a9gLWTNtYFG1rrk5MRAHBZKQucqsSqjtjQYzVjcQ90gSXpc/t2rl5SlkMmfc6UDgbZz9HEGTIEIjwx/z+CkdaT0HmvVBSw6Xk3otIIPQeIPRe5+Nh3P1ZFn0DaVwChD0EEXJz5fGY1kPmvlhSUbeEtjUQPh7CcKEb1yQi8h6OGamLdB3hukaFBlCSKm+j6wIpTZBqvm29FClL/u7lsu+69qi89LltkKw7pDRDnr4XKPwK9glVMVD4JeTpkZD+XGtGzYHMHlpSobZcEihzIPPfgMx9zvnBmiawDSh2g5oJmTvRtsqwq3hMayGz7yhZY6gcy3+Qp++BLHY0ZZiIyHeYjNRBlZeWtwJhD1TexnIYMrMT5IkLIE90gzyRYvt7Zieo2fdCmtZ5J2Bdiq24m9PkSAMEXQWhiXXvfMWLANO/cDoexrQaMP5RtVirQBZ8VjLDx8n9LvoG0ux49WWhhAIhN8KTAmgy/y1Ia5bjfVJC5j4L27059/7YBjDL3MmQ7i4gSETkBUxG6iBh6GPr/gdg/yO2/V2EjYUSchMQOsppGwAlK+GWzsLJK1kDBrZtphWQ2bdBFv1S/XiFgIh6y1ZxtsJDV7GVco+Y6Pb5ZOEsuP7VViALZ7vY72VFs+H6tZgGsuh7p3tF2KMlvULu/ucqgeIfHe+y7CxZhM9ZPBJQM0qSOSIi/2AyUkeJsMchot4BdF1gG4+hAPruEFEfQoQ9AABQwsfY1mXRpZS0EYC2E87+WlTScwIJmTMeUj1T/Xh1bSDifiopyV4yyFSJA0IfhIidayuR7i7rEVQ6ONd6uDrhuk1KFVAd91KcZQWsR53uFUoYRMy3EGFjACXejasqthlKDi/l/Dr27QJT2p+I6icOYK2jhBBA0JUQQVfaHoiAw0GSIigNIiitrA0KZkDmb/XgSmagaB4QOqL6MWsalZVkl9Lq8cyQMkosoB6H83EoomSlXt8TQoEUYeV6lRzRAEq06/MoobZXayG3Q55IqeSqEsLZ+Sq5jsftiIi8gMlIHSbVQqD4F0jzRgDCtgJtUH+H00lLExXVstvDqyiQlt2la9zaKqCa10EW/waoeRDaZkDwjYA0QRb9YPuXuRINETwAQtfJ6VmrnIgAEMGDIPO2uWghIfy5dkvwQKDwWzjvabJCBF3v1qmEEg5puKRkOrTz8yFogONduvNtg5fVDBcXiQA4o4aI/IjJSB0lTetKqrDmonQchiyaC+S9DETPdF4gS7g5c+PsASid7SHVfMjTDwDmf89eEyqQ/3ZJ27MJhiz8DNJwOUTUm96fZhs8CCj8vOR1zbkPbI1thkrQdd69pgsi9G7Iop9Kyu6fG49iSxL1Pdw/X9jDkMaVOFs5124vEDwYQtvU8bFCA4Q/AZkzzvn5w8fWmeq1RFQ7cMxIHSQtRyCz7y73asCKsoegmg2ZPczpOA9huAyerdhrsVVpBSDPjAXMa8+5ZvlXJVbYxWJcApnzjAfXco9QQiFivi4ZCwMA5Qp56bpDxHwFoYR4/bpO49E0goj5FtC0OCceAQRdAxE1zaNiY0LXASLm05Lp2eXPpwVChkNEPOP6+OBrISJfsfWAACj734AIgQifCFHJCsdERN7GhfLqIDX3FaDwMzjvxhcQ4U9ChN5V8VjVBJzo4uLY8koXyJtvq1FxysmrAZcUiPhlEJqkyptWgTTvAcwlU5B13SF07tUq8UksUgLmjSUVYfWA4SIITYNqnK9kmrJln22F4qBLPBroK6UJMC4tqcAaa1tjyI9JGhHVfe4+v/mapi4q/g2ukwkJWbzIYTIirHsh3UpEAGhbQUR/bBukaVyCsyvKekICxmVAyFAPj3OP0LUGdK19cm5PCSFs5ew9LGnv/HwKYOhj+6rS8XogqL9XYiEiqg6+pqmT3CjjLoucbC924/wCCL4JIvZHCE2C7TBZDLvXIW4TJQv2ERFRfcVkpC7StkWlpd617Z0c2wyV/1pIiKAr7aYKC21r2FYK9pRqWxOFiIjqLSYjdZA75eBFyC1ODo4uqYTqihZSd86rgaArABEFz3pHFNvMFn2qB8cQEVFdw2SkLjJcCgQPLvmmfHJQ8uMOHQWh7+L4WPPmSgp0AYAFwrrdbosQeltJd2jg3joqGkAYSqb28teQiKg+4wBWPzCbzFjxwxr88eVyZB/LRmKzBFx516VIveYCKIr7D2Kr1Yp/fl6PhZ/+iROHshDXKAYX3dQLZ07kYvXPa2EsNKF1t5YYcP8VaNJ+Mv791YQmTf9AcstCAMCJ4wmIafEo9OEuCmy5WybdchjQdbbbJAx9gNg5kPnTAeNiAFZbb0nw9YC02NZLkfkAtLYprWH3Q2hbuv35iYiobuLUXh/LP1OA8f2fx+61+6AoAqoqoWgUqFYV3a7simd/eBz6oIoVUc9VXGjEpAEvY9PSbWXHC0VAqvY/Po1WgdWiwhCsh7HIBAAICrFCSsBYpEFQqAGfbH8LCU0cr3EijcshT99baTwieiaEiyqdUppsA1NFaFnPh5RWW+EvEQwhdJVeg4iIajd3n9/sH/ex1+9+H/9t2A8AUEsSB9VqKyq2/vfN+Hj8126d54Nxn2HL8u12x5+biACA1WLbV5qIAEBxoQbGIturk+ICIx7u42IFXH0vQES6DkZEVVoxVAg9hBJuP8hVaCCUCCYiRERkh8mID2UcOIGV89eUJQ/nkqrErx/9gYLcQpfnyT2Vh98/XVqWzFTXqaPZ2L5yl8N9Quhtq8O6IMIfcbi+DRERUVUwGfGhzcu2O184toSp2Iyd//zndH92xml8+/I8WMyeFhNzbdFny5zvDLkNIvxJAHrYBsCWDi0ywKwdhxW/tcAfXyzHfxvSvRoTERHVTxzA6kPOekTOJdWK7YoKivHe6E+w+Ku/3D6PJ1b/tBZHn7wejVpVLEcuhABC7waCbwaKFwLqSaiIw9ev52P2q4thKl5S1rbV+c3xxGej0LyT44XZiIiIKsOeER9q39vJyrjlaLQanJfSwm6b1WrF09e/gsVf+iYRAYCcU3kY02ciso5lO20jlHCIkMEQYQ/i3cfP4Kvnf4Op2GzXJn3LQTzSdxKO/HfcJ3ESEVHdx2TEh5q2a4wul3SARuv4NisaBZfeeiGi4u0HjK5buAmb/twG1UGPibdIVSIvOx9z3/i50raHdx/Frx/+AUfzrlSrCmOhEd++9IMPoiQiovqAyYiPjf/iIcQnx0EoZ4uPCWH7at6pCUa9PaLCMb9/sRyKxvc/GtWqYuGnf1babslXfztNqADbDJ4/v10Bk9HstA0REZEzTEZ8LK5RLD5Y/yruffl2JLdthPCYMLTo0gwPvXcP3l75AkIjQyscc+pots9ez5yr4EwhrBbXg2OzM8447BUpz2KyYGijkXjnwRk4sueY3T6p5kMWfAz1ZBrUjM5QT1wMNe8dSNX5KyIiIqo/OIDVD8KiQjH4sesw+LHr3GofnxwLIQT8UY8uPCYMGq3r8u3BYUFuJUd52flY8PFiLPxsKaYseApd+nWAVLMhT90KWA8AKDmHehwoeB+yaA4QOwtC06j6H4SIiGot9ozUQFfceYlfEhFFo+Dqey6rtN2edfvcPqfVosJismDyDa+iuNAImfMcYD2IskSkjAqoWZBnHvMsaCIiqnOYjNRAKZd3RqPWFafcepOiVRCTFIUbxw1w2e7If8exzUmBNGekKlFwphCrflgAGBfC+QrCVsC8HtK8x6PzExFR3cLXNH52+kQOls1aiezjpxGdFIVLhvaBVq/FstmrcOLgSUTERaDfkN645+Xb8OwNr/ssjoTkONww5hqERgS7bOdJr0h5Gq0GORn/omKPiAPmzYCudZWuQ0REtR+TET+RUuKbF3/Al8/Ngaqq0GgUWK0qpj/6uW18iCpti9xZVXz0+Bc+jUUoAllHTuH9Rz7F58/MxoQvH0bqNSkO21Y2nsT1hdz89RLVuAYREdV6fE3jJ/PeWYDPnp4Fq8UKqUpYzLY/pSqhWlVIeXabr5VeHwAKc4owedCr2Pmv45L0nS9uX6WExGqxolG7KwEEVdJSAfS9PT4/ERHVHUxG/MBkNOPLZ+cEOgyHpJSQEvj6hbkO90cnROKKO/vZ1UmpjKJR0Oi8Bkjp3wsIvR229W0ctgSCroHQJHkeOBER1RlMRvxg87LtyD9T4PXzCkVAq9fa1pIped6XL5ZW+ndRSR6hWlX8u2ADivKLHO4f9fYIXHBZJ7tzKuWKoAmNKIsHAOIaxWDKb09Bo9FAhI0FDJeXtNTY/6lLgYh4zp2PSkREdRjHjPhBYU6hT84rVYlOF7ZF7+t74N9f18NkNKNd6nm48q5LcWD7Yfz5zd84cyIX2RlncDw903WtEAkUFxgRHFZxQKsh2ICXfnsK63/fjD++WI6so9mIaxyL/nf2Q1RiJBZ+/CfStx5EcGgQLrwhFf2G9kFQiAEAIIQOiHoXMP0LWTQXsB4DlHiI4IGA4SIIjhchIqr3hPRHQYtqys3NRWRkJHJychARERHocDy2d9N+PHDBE14/r0arYMD9/THqnbtctpvz+k+YMf4rl+NRQiKC8f3JmdDqmJ8SEZF3uPv85msaP2jVtTladm3m9fVmrBYVV99bedGytGEXu7y2rfhZGhMRIiIKCCYjfjJuxv3Q6bXeSUhKxoAMfXIgmndqWmnz6IRIPPiWbUE+cc4AEkWjoEGLRNzyv0HVj4uIiKgKqvRknDZtGpo1a4agoCCkpqZizZo1TtvOmDEDffv2RXR0NKKjo5GWluayfV3VOqUl3ln9Enpcdf7ZhEDYps5ekNbJLklp3qkJGrduWPa9ohHQ6s6OrWjQPBFjP7ofd710q9vXv+7B/nh67mNo1jG5bJs+SIer77kM76x6EREx4dX4dERERFXn8ZiR2bNnY9iwYZg+fTpSU1MxdepUzJkzB7t370ZCQkKF9rfddhv69OmD3r17IygoCK+88grmzZuH7du3o1Ej9xZIq+1jRs6Vk5WL05k5iEqIQFR8JAAg73Q+Th07jYjYMMQkRQMAThzOQlFeEeKT46DVaXB8/wno9Fo0aJFYoYfDXVJKnDiUheKCYiQ0iXM4YJWIiMgb3H1+e5yMpKamonv37njvvfcAAKqqIjk5GQ899BDGjx9f6fFWqxXR0dF47733MGzYMLeuWdeSESIiovrAJwNYTSYT1q9fj7S0tLMnUBSkpaVh9erVbp2jsLAQZrMZMTExTtsYjUbk5ubafREREVHd5NH0iaysLFitViQmJtptT0xMxK5d7q3s+uSTT6Jhw4Z2Cc25pkyZgmeffdaT0GqMgzsO49Qx2yJ4zTrYxmekbzmInJO5iE+ORXKbRji8+yhOHj4FRasgfctBqBYVfQb1QIPmiZWcnYiIqO7x61zOl19+GbNmzcKyZcsQFOR8zZIJEyZg3LhxZd/n5uYiOTnZafuaYMtfO/DB2M+wd+P+sm2JTeOhqipOHj5Vti0o1IDiAmOF4z987Askt22EVxc/jbiGznuNiIiI6hqPkpG4uDhoNBpkZmbabc/MzERSkuv1RV5//XW8/PLLWLx4MTp37uyyrcFggMFg8CS0gNq8bDuevOJ5qKp9hdPMgycrtHWUiJQ6vOsoRrR5GN8eno6wqDCvx0lERFQTeTRmRK/XIyUlBUuWLCnbpqoqlixZgl69ejk97tVXX8Xzzz+PhQsXolu3blWPtgaSUuLtB2dAVVWvrLhbXGDEtIc/9UJkREREtYPHdUbGjRuHGTNm4PPPP8fOnTvxwAMPoKCgACNG2IpqDRs2DBMmTChr/8orr2DSpEmYOXMmmjVrhoyMDGRkZCA/P997nyKA9qzbh8O7jnolESn19w//eO1cRERENZ3HY0aGDBmCkydP4umnn0ZGRga6du2KhQsXlg1qPXToEBTlbI7zwQcfwGQy4aabbrI7z+TJk/HMM89UL/oawNGrmOoyFZm8fk4iIqKaqkoDWEePHo3Ro0c73Lds2TK77w8cOFCVS9QakXHer3ui0XKNGCIiqj/41Kumjhe2RUyDaGQfP+21c0bGh+Pd0R/josG90Pmi9lWutuovUkps+WsH/p77DwpyC9H4vIboP6If4hrFBjo0IiKqBTyuwBoINb0C6+Kv/sIrw9712vkUjQIhBKwWKzpd1A7PzX8SYVGhXju/NxXkFODpga9iy/Id0Gg1KPt1khL3vT4cNzxyTWADJCKigPFJBVZyLO32i/DoJw8iNDIEACAUW0+GzqCDVud555NqVWG1WAEA21fuxgtD3/JesF72wtC3sG2FreCd1WKFalVtX6rEB+M+w19z3avMS0RE9Rd7RrzIVGzCv79uQNbRbMQkRSH12hRkHcnCXe3Gwtlt1kkr2otT2Ix4AAKQEl1wEjsQC7M4u1LvB+tfRavzm/vpk7hn76b9eOCCJ5zuF0KgWcdkfLjp9Rr/qomIiLzP3ec3x4x4kT5Ij7439rTbtnnZDpeJyDNYhR4yEz+gFaajCx7AZgzCXqxBIp6RvWEWGmi0Clb9uLbGJSOrf1wHRatAtagO90spsX/rIZw8cgoJyXF+jo6IiGoLvqbxMWORqey1TXmliUg32KrZ3oC9+ACLMQh7AQDdkIlnsAo6aQWEgLEGTvctLjRCcaPHw1jovOosERERkxEvkFLa9X6U/75F56YOC6K1xyn0QKbdD6AFcsr+rgDogUy0wylYzVY079Sk7NznXqcqb9q88XauReemsJitLtsEhRqQ0IS9IkRE5Bxf01TDqp/WYu6bP2P7yt0AgJZdm8EQrMfudftgMZqR3LYRrr43DRExYcjNtq84uxnxmIdWZT0hAHBuH8MPaIUtiIeiVbB52XZ89PgXOJ2ZA61OUzZIFACEANp0a4WbHh2Aiwb3cjo+ozCvCPPeWYBfPvwdWUeyERIRjMtuuwiDHx2ABi08XzG4742peO/hUBTkFDpMuBSNgivvuhSG4NqzzhAREfkfB7BW0eeTZ+Or5+dC0ShQrY7HTFRGSIkPsBgtkGOXiEgA6YjEA0iD9HDg56CHr8YDb91ZISHJO52PsRc9jcM7j5QlMQCgaBUEhRjwxtJnqzQmZe3CjZh03SuQkHZjRxSNgibtGmHq388jNLJmTksmIiLfcvf5XS+TkYLcQiz+8i/8NXc1CnIK0aJzU1x73+WIbRiDXz78AxuXbAEAdL2kI669/wokNUuwO37bip0Ye9HT1QtCSjxYMljVmR/QCh+gi63rwwMv/Dweqdek2G17894PsOizZQ4TJ0WjIKlZPD7d/Y5dKX937Vm/D99OmYdV89dAVSUiYsNx7X2X4+YnrkdoRIjH5yMiorqByYgTR/47jscumYxTx09DAJAS0GgVWC1q2UDT0lcOikaBUASe+uYRu1kyL976Fv6e+w+sTmaRuKOLPIHX8ZfdNomKr2oexUXYIhLgLqEIpKR1xpSFE8u25Z8pwOCke2AxWVwe+8rvk3BBWme3r3Uus8kMU5EJweHBVUpqiIiobmHRMwesViueuuYlnM7MAaQtEQFQllRIVdqNfVCtKqxmK14Y+haO7DkGALCYLdj057ZqJSIAsAOxWINElD9LOiLPXhvAGiRiJzwrqS5Vid3r9tltO7TraKWJCATw8/TfUVRQ7NH1ytPpdQiNDGUiQkREHqlXT411Czfh2N4Mj8d4qFYVb933IfZtPoDbmz+IMydyqx2LWWjwDHpjHWwDR39AKzyANMxDK1usSMQz6G1X+MxdOoPO/nu9G+OUJbDih38xpOFI/PPLeo+vSUREVFX1ajbNhsVbodFpYK1kOqojW5bvwNi+k1CUX/Weg3OZhQbPyN5oh1PYgnhACLwvu2AFGmLnORVY3aVoFPS5vrvdthadmyI6KQqnM85UenxxfhGeueE1vL3qRbTp1tLj6xMREXmqXvWMqKpqG5hRRd5MREqZhcY2JqR0kKoQ2CISqpSI2A4XuP6hq+y2abQaDH1yoFvH215dScx+ZX6Vrk9EROSpepWMdOjdpmwBurrqyS9Go2m7xhW2D3r4atxYsoJuZZNzrBYVK+evgdVat+8VERHVDPUqGekzqAdCwoMDHYZPCCFw2e0X4ZKhFzrdf/+bd+KjLW+g0XkNKj2falUrH/RKRETkBfUqGdHpdbjn5dsCHYZXCSEAAbTu1gIPT7un0vbNOzbBpbf2haJx/aOPaxQDfZDeW2ESERE5Va+SEQC45r7LA75WSvNOTdCu53keHROdGInw6DAkNYvHBWmd0bBVEsJjwtDq/GZ45IOReHP5c273+lx516Vn5zU7IBSB6x680mlZeSIiIm+qV7NpAEBRFEz4egyeuPw5WM1Wt6f5RsaF44IrumLpN39X6/r6YB0e/3QUQiKC8XCvp1CQU1BpzZLLbuuL8V8+XK3rlhffOBYPTB2BaQ/PhKII+/LwikCbHq1wwyNXe+16RERErtS7nhEA6NinLd5d/RJ6XdcNSknVVWedAEIR6Na/C7468D7GfzEao96+C9GJkY4bw5Zs6IN0Dvf1vakn3l/3Ks67oAUatWqA99e9grTbL4LWSR2Q4LAg3DF5sFcTkVIDR1+FZ+c/gdblpu9GxIbjlgk34NXFk7m4HRER+U29Kwd/rsK8IuSfKUBkXDgsJgsK84oRHhuGjPQTMBnNaNYxGXq9fXIhpUR2xhkU5BYic/8JhMeEIalFAixGC6ISIqHVaVGQV4B/ftkArVZB6+6tEBUfieDQIIcxGIuMyMnKQ3h0KIQicGjHEYRGhro10NQbck/lwVRsQnRiFDTaqk0pJiIiOhfXpiEiIqKA4to0REREVCvUuwGszhzadRSHdx1FcFgQOvZtB73B8bgPR9K3HMSxfRmwWqzQaDXQGXTo0LsNwqJCAQBWixXbVu5CXnY+kponoGWXZm7PVCnMK8K2FbtgMVnQ6vxmSGgSX+kxdtdrloCWXd2/HhERkb/V+2Tk4M4jmHrfh9i2YlfZtrCoUNz6vxtw06MDXD7Ed6/di6n3f4S9G/dX2KcL0uHakZejWcdkfPb0bLt1YVp2aYqHPxiJ9j1bOz23xWzBp099ix+nLYSxyGTbKIDUa1Iw9sP7ENsg2uFxf3yxHB9P+BrZx0+XbWveqQnGfDASHXq3cXo9IiKiQKnXY0aO7cvAg92fRFFescMpvrdMGIS7XrzV4bH/bUjHIxdOhNlodl6yQ8DhWjiKIqDRafDWX8+jTfdWFfZLKfHiLVPx15zVOPfHo2gUxCfH4v21ryAiNtxu368f/YGp939UMQxFQKPV4I1lz7pMgIiIiLyJY0bc8MUz36E433EiAgCzXp6Pk0dOOdw348mvYDFbXdUOc7oon6pKWC0qPnz8C4f7d6zeg+XfraqQiAC2Mu0nD5/C/Hd/s9teVFCMDx9zfD6pSqgWKz5ycj0iIqJAqrfJSFFBMZbNXuWy4JhQBBZ/+VeF7VlHT2Hjkq1uF0xzRLWq2PrXTmQcOFFh36JPl0Kjdf6jUa0qFny82G7b6h/XulxVWFUltq/cjePpmVWOmYiIyBfqbTKSdyqv0hV8hSKQdbRiz8ipY6cdtK4aR+fKOnqq0qqs5ceg2I7JrnS9GQBOe3qIiIgCpd4mI+ExYZU+vK1mK4IdrPfiqgKrpxydKyYp2mXPCABExNmPF4lOinKrpyYmKcqj+IiIiHyt3iYjwWHBuPCGHrZBpi78tyG9wraEJvHo1LedWz0RzghFoF3P89CwZVKFfZcPu9hlz4iiUXDlXZfZbeszsAcMwc5X2RWKQOtuLdG4dcMqx0xEROQL9TYZAYBrRl7udJBpqY2Lt+LEoZMVtt895TbbtF8XyYyzacFCEVAUgXtfucPh/s4Xt0ePay4oWzenPEWrICo+AjeMsV/ILiQ8GHc+P9RpHEIIjHzV8fWIiIgCqV4nI3nZBZW2kVJi5797K2zv0LsNXl40EQ1aJDo8TlEELru9L+555XaERITY7UtsGo+XFjyFTn3bOTxWCIHJcx7FlXdfWmGtmPY9W2PqyhcQnRhV4bgbx16LUW/fhdBI++slNI3Di7/+D136dXD1UYmIiAKiXtcZ+fv7f/Dc4Dcqbff0nEfR98aeDvdJKTHv3QX44pnvUHCmEEKUdLZI4LLb+mLsR/cBANb/vgW52flo0CLB9opHcS8PPH0iBxuXbIXFZMF5KS3QvGOTSo8xFZuw7vfNyD2VjwbNE9DpIvevR0RE5C1cKM8NpzPPYGjyfVBdjM/QaBV8e/hDhz0RALBv8wE81HMCrGYrVNX+VgpFoNd13fDsD094LWYiIqLagkXP3BCdGIXLbu3rdCCqolFw6a19nSYiAPD1C9/DalErJCKArdjYqvlrHQ6CJSIiIpt6nYwAwEPv3Y32vWwl0kuTktI/2/dqjYfeu9vpscYiI1bOX+NySq1Gq8HSb1dUKTar1YqC3EIUFRSjKL/IYUVWIiKi2q7eL5QXHBaM1/98Bqt+XIuFn/6Jk4dPIT45FleOuBS9r+9eYQBpeUUuSsmfJZGXne9RTJkHT+LbKfOw6LOlsJgsZdsTm8bhpnHXYcADV7iMi4iIqDap98kIYOu96HtjT6eDVJ0Jjw5DcHgQivKcl2GXEkhyMuPGkYM7j2DshRORn1MIec6rn8yDWZg2ZiY2Lt2Kp+c8Co2GCQkREdV+9f41TXVotBpcdddlLoufSSlxxfB+AIDj+zMx44kvcXeHR3Bn64fw2ohp2L3Wftrw6yOmoSC3qEIiUt6q+Wux6NNl3vgIREREAcdkpJpu+d8gxDeOhXJu+faSemV3vXAL4hvHYu2iTbi7/SOY+9YvOLTzKI7uzcCSr//C6NQJmPPGzwBsM3N2rdlb+asfAcx/b4EPPg0REZH/MRmppqj4SLyz+kVcMqSP3TiOxKbxeGzmgxg6fhBOZ57BMze8BovJapdolJZ8/+jxL7B52Xakbzno3kUlcGjHEa9+DiIiokDhmBEviEmKxvgvH8aDU0fg2L4MGEIMaNq+cVmhsQUfL4HZaHY6G0ajVfD9W78g7Y6L3L6mzqDzSuxERESBxmTEiyJiwxERG15h+5bl212OAbFaVGxaug1PfD4aOoMOZqPZ5XUUjUCfQT2qHS8REVFNwNc0fuBueZCwqFBcP/pKpwvslRJCwU3jBnghMiIiosBjMuIHXfp1gHCwAm8pjVYpW8Tunim3uXxdo9Vr8fTcR9Gqa3Ovx0lERBQITEb84Kq7L4XOoIOzDg+rRcWNY68FYJsunHr1BUhsGu+wrcVkwVfPzcX6Pzb7KlwiIiK/YjLiBzFJ0Xjm+8eg1WvtapJoSqYDj3z1DnS9pCMA4Kf3F+GFoW8h89BJp+fbu2k/Jlz1IlbOX+PbwImIiPygXq/a62/H0zPx8weLsPqX9bCarejQpw2uH3Ul2vY4DwCQeyoPQxqNtCsB75QAImPDMevoR9DqOA6ZiIhqHnef33yK+VGDFokY+dowjHxtmMP9S77+G1aL1b2TSSAnKw9rFmxE7+u7ezFKIiIi/+JrmhrkeHomNC5Ky59L0Sg4np7pw4iIiIh8j8lIDRIeHQbVRT2Sc6lWFWHRoT6MiIiIyPeYjNQg/Yb2rnxdmnJ0Bi1f0RARUa3HZKQGSW7TCGm3X+SyJkl5Nz92PcKjw3wcFRERkW/V6wGs/21Ix4Fth2EI0SPl8s4IjQz8K4+xM+6HVq/Fok+Xlq38W1pKXtEokKqEolEw+LHrMOzZmwMYKRERkXdUaWrvtGnT8NprryEjIwNdunTBu+++ix49nK+VMmfOHEyaNAkHDhzAeeedh1deeQVXX32129fz9tTe/VsP4tU7p2Hvxv1l2/RBOtww5hrc+cJQaDQaF0f7x4lDJ7Fy/loU5hWhQfMEmE0WZB3NRkRsOPremIqo+MhAh0hEROSSu89vj5OR2bNnY9iwYZg+fTpSU1MxdepUzJkzB7t370ZCQkKF9qtWrcJFF12EKVOm4Nprr8U333yDV155BRs2bEDHjh29+mHccXTvcYzqPh5F+cUVxmcIAVx1bxrGTr+vWtcgIiIiHyYjqamp6N69O9577z0AgKqqSE5OxkMPPYTx48dXaD9kyBAUFBTgl19+KdvWs2dPdO3aFdOnT/fqh3HHayOmYfHXf0G1OB8o+smOqWjStlG1rkNERFTfufv89mgAq8lkwvr165GWlnb2BIqCtLQ0rF692uExq1evtmsPAP3793faHgCMRiNyc3PtvrzBZDTjz29XuExENFoFi79c7pXrERERUeU8SkaysrJgtVqRmJhotz0xMREZGRkOj8nIyPCoPQBMmTIFkZGRZV/JycmehOlUYW6hG6XWBU5nnPHK9YiIiKhyNXJq74QJE5CTk1P2dfjwYa+cNzQyBLogncs2UkrENorxyvWIiIioch4lI3FxcdBoNMjMtC9BnpmZiaSkJIfHJCUledQeAAwGAyIiIuy+vEGn1yHttr5QtM4/tmpVccXwfl65HhEREVXOo2REr9cjJSUFS5YsKdumqiqWLFmCXr16OTymV69edu0B4I8//nDa3tdum3gTQiNCoDhZA+aGMdegYUvniRIRERF5l8evacaNG4cZM2bg888/x86dO/HAAw+goKAAI0aMAAAMGzYMEyZMKGs/ZswYLFy4EG+88QZ27dqFZ555BuvWrcPo0aO99yk8kNg0Hu+sehEd+rSx2x4SEYw7nx+K+95wvKIuERER+YbHFViHDBmCkydP4umnn0ZGRga6du2KhQsXlg1SPXToEBTlbI7Tu3dvfPPNN5g4cSL+97//4bzzzsP8+fPdrjHiC41bN8Sby57D4d1HcXDHERhCDOh8UTsYgg0Bi4mIiKi+qlIFVn/zdgVWIiIi8j2f1BkhIiIi8jYmI0RERBRQTEaIiIgooJiMEBERUUAxGSEiIqKAYjJCREREAcVkhIiIiAKKyQgREREFFJMRIiIiCiiPy8EHQmmR2Nzc3ABHQkRERO4qfW5XVuy9ViQjeXl5AIDk5OQAR0JERESeysvLQ2RkpNP9tWJtGlVVcezYMYSHh0MI4bXz5ubmIjk5GYcPH+aaNz7E++w/vNf+wfvsH7zP/uHL+yylRF5eHho2bGi3iO65akXPiKIoaNy4sc/OHxERwV90P+B99h/ea//gffYP3mf/8NV9dtUjUooDWImIiCigmIwQERFRQNXrZMRgMGDy5MkwGAyBDqVO4332H95r/+B99g/eZ/+oCfe5VgxgJSIiorqrXveMEBERUeAxGSEiIqKAYjJCREREAcVkhIiIiAKqzicj06ZNQ7NmzRAUFITU1FSsWbPGZfs5c+agbdu2CAoKQqdOnbBgwQI/RVq7eXKfZ8yYgb59+yI6OhrR0dFIS0ur9OdCZ3n6O11q1qxZEEJg4MCBvg2wjvD0Pp85cwajRo1CgwYNYDAY0Lp1a/7/ww2e3uepU6eiTZs2CA4ORnJyMsaOHYvi4mI/RVs7/fXXXxgwYAAaNmwIIQTmz59f6THLli3DBRdcAIPBgFatWuGzzz7zbZCyDps1a5bU6/Vy5syZcvv27fLee++VUVFRMjMz02H7lStXSo1GI1999VW5Y8cOOXHiRKnT6eTWrVv9HHnt4ul9vvXWW+W0adPkxo0b5c6dO+Wdd94pIyMj5ZEjR/wcee3j6b0utX//ftmoUSPZt29fef311/sn2FrM0/tsNBplt27d5NVXXy1XrFgh9+/fL5ctWyY3bdrk58hrF0/v89dffy0NBoP8+uuv5f79++WiRYtkgwYN5NixY/0cee2yYMEC+dRTT8kffvhBApDz5s1z2T49PV2GhITIcePGyR07dsh3331XajQauXDhQp/FWKeTkR49eshRo0aVfW+1WmXDhg3llClTHLa/+eab5TXXXGO3LTU1Vd53330+jbO28/Q+n8tiscjw8HD5+eef+yrEOqMq99piscjevXvLjz/+WA4fPpzJiBs8vc8ffPCBbNGihTSZTP4KsU7w9D6PGjVKXnrppXbbxo0bJ/v06ePTOOsSd5KRJ554Qnbo0MFu25AhQ2T//v19FledfU1jMpmwfv16pKWllW1TFAVpaWlYvXq1w2NWr15t1x4A+vfv77Q9Ve0+n6uwsBBmsxkxMTG+CrNOqOq9fu6555CQkIC7777bH2HWelW5zz/99BN69eqFUaNGITExER07dsRLL70Eq9Xqr7Brnarc5969e2P9+vVlr3LS09OxYMECXH311X6Jub4IxLOwViyUVxVZWVmwWq1ITEy0256YmIhdu3Y5PCYjI8Nh+4yMDJ/FWdtV5T6f68knn0TDhg0r/PKTvarc6xUrVuCTTz7Bpk2b/BBh3VCV+5yeno4///wTt912GxYsWIC9e/fiwQcfhNlsxuTJk/0Rdq1Tlft86623IisrCxdeeCGklLBYLLj//vvxv//9zx8h1xvOnoW5ubkoKipCcHCw169ZZ3tGqHZ4+eWXMWvWLMybNw9BQUGBDqdOycvLwx133IEZM2YgLi4u0OHUaaqqIiEhAR999BFSUlIwZMgQPPXUU5g+fXqgQ6tTli1bhpdeegnvv/8+NmzYgB9++AG//vornn/++UCHRtVUZ3tG4uLioNFokJmZabc9MzMTSUlJDo9JSkryqD1V7T6Xev311/Hyyy9j8eLF6Ny5sy/DrBM8vdf79u3DgQMHMGDAgLJtqqoCALRaLXbv3o2WLVv6NuhaqCq/0w0aNIBOp4NGoynb1q5dO2RkZMBkMkGv1/s05tqoKvd50qRJuOOOO3DPPfcAADp16oSCggKMHDkSTz31FBSF/772BmfPwoiICJ/0igB1uGdEr9cjJSUFS5YsKdumqiqWLFmCXr16OTymV69edu0B4I8//nDanqp2nwHg1VdfxfPPP4+FCxeiW7du/gi11vP0Xrdt2xZbt27Fpk2byr6uu+46XHLJJdi0aROSk5P9GX6tUZXf6T59+mDv3r1lyR4A7NmzBw0aNGAi4kRV7nNhYWGFhKM0AZRcZs1rAvIs9NnQ2Bpg1qxZ0mAwyM8++0zu2LFDjhw5UkZFRcmMjAwppZR33HGHHD9+fFn7lStXSq1WK19//XW5c+dOOXnyZE7tdYOn9/nll1+Wer1ezp07Vx4/frzsKy8vL1Afodbw9F6fi7Np3OPpfT506JAMDw+Xo0ePlrt375a//PKLTEhIkC+88EKgPkKt4Ol9njx5sgwPD5fffvutTE9Pl7///rts2bKlvPnmmwP1EWqFvLw8uXHjRrlx40YJQL755pty48aN8uDBg1JKKcePHy/vuOOOsvalU3sff/xxuXPnTjlt2jRO7a2ud999VzZp0kTq9XrZo0cP+c8//5Ttu/jii+Xw4cPt2n/33XeydevWUq/Xyw4dOshff/3VzxHXTp7c56ZNm0oAFb4mT57s/8BrIU9/p8tjMuI+T+/zqlWrZGpqqjQYDLJFixbyxRdflBaLxc9R1z6e3Gez2SyfeeYZ2bJlSxkUFCSTk5Plgw8+KE+fPu3/wGuRpUuXOvx/bum9HT58uLz44osrHNO1a1ep1+tlixYt5KeffurTGIWU7NsiIiKiwKmzY0aIiIiodmAyQkRERAHFZISIiIgCiskIERERBRSTESIiIgooJiNEREQUUExGiIiIKKCYjBAREVFAMRkhIiKigGIyQkRERAHFZISIiIgCiskIERERBdT/AcoH0lHVNMaNAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Elbow"
      ],
      "metadata": {
        "id": "eaZgodWhZqFa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score"
      ],
      "metadata": {
        "id": "oUsJHXM5Z745"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inertias = []\n",
        "for k in range(2, 11):\n",
        "  km = KMeans(n_clusters=k, n_init=20, random_state=42)\n",
        "  km.fit(X_scaled)\n",
        "  inertias.append(km.inertia_)\n"
      ],
      "metadata": {
        "id": "-YwVbgiYZrIz"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inertias"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C1rEL4eCasWJ",
        "outputId": "7ca464e8-edeb-41f5-9f7c-4ae77bc01f2c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[4.502778745804874,\n",
              " 2.7700416334306692,\n",
              " 1.8939084698777757,\n",
              " 1.326545820326389,\n",
              " 1.027255480200516,\n",
              " 0.8154072833189044,\n",
              " 0.7103357559239664,\n",
              " 0.6255128093916127,\n",
              " 0.5569072163943646]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(2, 11), inertias)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "Zdo4fBgdatI7",
        "outputId": "153a6871-1f0d-426c-d295-66fffe683df2"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ec0aa497490>]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Silhouette"
      ],
      "metadata": {
        "id": "DImXc-Qtbc_P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s_scores = []\n",
        "for k in range(2, 11):\n",
        "  km = KMeans(n_clusters=k, n_init=20, random_state=42)\n",
        "  km.fit(X_scaled)\n",
        "  score = silhouette_score(X_scaled, km.labels_)\n",
        "  s_scores.append(score)"
      ],
      "metadata": {
        "id": "1i8J8xvda18D"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eSTSKu1rcDCh",
        "outputId": "bd77a1b5-cb2a-4153-8caa-8befa5809160"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.5957073029789847,\n",
              " 0.5138591478549178,\n",
              " 0.5442760107080163,\n",
              " 0.5243394979574025,\n",
              " 0.5113845548333092,\n",
              " 0.5190445329749817,\n",
              " 0.5223675228838421,\n",
              " 0.5325881980809285,\n",
              " 0.4845839869293326]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(2, 11), s_scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "HX4gaVaacEnl",
        "outputId": "8e6b0399-e994-431f-f800-b60e64ddb2c7"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ec0a7974af0>]"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Calinski**"
      ],
      "metadata": {
        "id": "y92Ob45pcU8y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "c_scores = []\n",
        "for k in range(2, 11):\n",
        "  km = KMeans(n_clusters=k, n_init=20, random_state=42)\n",
        "  km.fit(X_scaled)\n",
        "  score = calinski_harabasz_score(X_scaled, km.labels_)\n",
        "  c_scores.append(score)"
      ],
      "metadata": {
        "id": "BBioODvtcN4X"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "daHheQM9cgRg",
        "outputId": "878a66a3-e085-44b9-85e6-8668c427326b"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[280.3624781408243,\n",
              " 275.2082043596216,\n",
              " 290.528549473175,\n",
              " 325.54992894011906,\n",
              " 343.0503869580232,\n",
              " 364.3754803517233,\n",
              " 359.3520203396721,\n",
              " 357.2497369110379,\n",
              " 356.3367226495999]"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(2, 11), c_scores)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "Dh-fOOLJcg3X",
        "outputId": "f9b83b2f-4f7d-4675-b339-0dabb011fef5"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ec0e3e531f0>]"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7 Clusters"
      ],
      "metadata": {
        "id": "xenIdtAYlzBQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "km7_scaled = KMeans(n_clusters=7, random_state=42)\n",
        "km7_scaled.fit(X_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "HKK4Gt24lyd3",
        "outputId": "39c84be8-bae2-4b41-c264-6952e1bff3dd"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=7, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=7, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=7, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km7_scaled.transform(X_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uRkATNTBmV7P",
        "outputId": "4ffd5c14-4e23-4c95-fb3b-5ce7586e0316"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.32811789, 0.3787255 , 0.1226943 , ..., 0.38751943, 0.77952353,\n",
              "        0.18940337],\n",
              "       [0.47184561, 0.239839  , 0.23320106, ..., 0.29062978, 0.63505811,\n",
              "        0.33398681],\n",
              "       [0.45721437, 0.24255607, 0.23880856, ..., 0.32412301, 0.64568834,\n",
              "        0.32464244],\n",
              "       ...,\n",
              "       [0.65565689, 0.11451164, 0.39964357, ..., 0.22669399, 0.45622425,\n",
              "        0.51625187],\n",
              "       [0.57801805, 0.13813479, 0.39830668, ..., 0.39672458, 0.54107501,\n",
              "        0.46329671],\n",
              "       [0.60774402, 0.09117666, 0.40415569, ..., 0.35410734, 0.50048594,\n",
              "        0.4850362 ]])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km7_scaled.labels_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q2jpVp8nmV3j",
        "outputId": "d4d8a1b4-ad08-47f2-af5b-f6a885ec7c03"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3, 3, 3, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 4, 0, 0, 0,\n",
              "       0, 0, 0, 0, 6, 6, 6, 6, 2, 2, 5, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 3,\n",
              "       1, 1, 1, 1, 5, 0, 0, 0, 2, 2, 6, 6, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 6, 6, 4, 4, 4, 4, 4, 4, 2, 2, 3, 3, 3, 3, 4, 0, 2, 0, 0,\n",
              "       0, 6, 1, 2, 2, 3, 3, 4, 4, 0, 0, 0, 6, 6, 6, 6, 2, 6, 6, 6, 2, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3,\n",
              "       6, 6, 6, 6, 6, 4, 4, 4, 0, 6, 0, 6, 6, 0, 2, 6, 2, 2, 3, 3, 4, 4,\n",
              "       3, 4, 1, 1, 1], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=km7_scaled.labels_)\n",
        "plt.scatter(km7_scaled.cluster_centers_[:, 0], km7_scaled.cluster_centers_[:, 1], marker = \"X\", color=\"red\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "qjWDdY_wmVz6",
        "outputId": "1d1e7f7e-ba5b-4aa0-8caa-27fbe709cc4c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Boundaries"
      ],
      "metadata": {
        "id": "vU9X5hR2aKqM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.spatial import Voronoi, voronoi_plot_2d"
      ],
      "metadata": {
        "id": "kJJcAs9QZXg7"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vor = Voronoi(km3_scaled.cluster_centers_)\n",
        "fig = voronoi_plot_2d(vor)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "fwagqWpTaJRi",
        "outputId": "401da9db-d387-4d1a-d69f-ff2f235e776f"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## DBSCAN"
      ],
      "metadata": {
        "id": "GzyaKuvzm0bP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN"
      ],
      "metadata": {
        "id": "5xGcFqhigxnr"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8JTmDvppm3Bt",
        "outputId": "6f0819a1-d94a-4288-9be8-3da54cd218b3"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[13950.,   102.],\n",
              "       [17450.,   115.],\n",
              "       [17710.,   110.],\n",
              "       [23875.,   140.],\n",
              "       [16430.,   101.],\n",
              "       [16925.,   101.],\n",
              "       [20970.,   121.],\n",
              "       [21105.,   121.],\n",
              "       [ 5151.,    48.],\n",
              "       [ 6295.,    70.],\n",
              "       [ 6575.,    70.],\n",
              "       [ 5572.,    68.],\n",
              "       [ 6377.,    68.],\n",
              "       [ 7957.,   102.],\n",
              "       [ 6229.,    68.],\n",
              "       [ 6692.,    68.],\n",
              "       [ 7609.,    68.],\n",
              "       [ 8921.,    88.],\n",
              "       [12964.,   145.],\n",
              "       [ 6479.,    58.],\n",
              "       [ 6855.,    76.],\n",
              "       [ 5399.,    60.],\n",
              "       [ 6529.,    76.],\n",
              "       [ 7129.,    76.],\n",
              "       [ 7295.,    76.],\n",
              "       [ 7295.,    76.],\n",
              "       [ 7895.,    86.],\n",
              "       [ 9095.,    86.],\n",
              "       [ 8845.,    86.],\n",
              "       [10295.,    86.],\n",
              "       [12945.,   101.],\n",
              "       [10345.,   100.],\n",
              "       [32250.,   176.],\n",
              "       [ 5195.,    68.],\n",
              "       [ 6095.,    68.],\n",
              "       [ 6795.,    68.],\n",
              "       [ 6695.,    68.],\n",
              "       [ 7395.,    68.],\n",
              "       [ 8845.,    84.],\n",
              "       [ 8495.,    84.],\n",
              "       [10595.,    84.],\n",
              "       [10245.,    84.],\n",
              "       [11245.,    84.],\n",
              "       [18280.,   120.],\n",
              "       [25552.,   123.],\n",
              "       [28248.,   123.],\n",
              "       [28176.,   123.],\n",
              "       [31600.,   123.],\n",
              "       [35056.,   155.],\n",
              "       [ 5389.,    68.],\n",
              "       [ 6189.,    68.],\n",
              "       [ 6669.,    68.],\n",
              "       [ 7689.,   102.],\n",
              "       [ 9959.,   116.],\n",
              "       [ 8499.,    88.],\n",
              "       [ 6989.,    88.],\n",
              "       [ 8189.,    88.],\n",
              "       [ 9279.,   116.],\n",
              "       [ 9279.,   116.],\n",
              "       [ 5499.,    69.],\n",
              "       [ 7099.,    55.],\n",
              "       [ 6649.,    69.],\n",
              "       [ 6849.,    69.],\n",
              "       [ 7349.,    69.],\n",
              "       [ 7299.,    69.],\n",
              "       [ 7799.,    69.],\n",
              "       [ 7499.,    69.],\n",
              "       [ 7999.,    69.],\n",
              "       [ 8249.,    69.],\n",
              "       [ 8949.,    97.],\n",
              "       [ 9549.,    97.],\n",
              "       [13499.,   152.],\n",
              "       [14399.,   152.],\n",
              "       [13499.,   152.],\n",
              "       [17199.,   160.],\n",
              "       [19699.,   200.],\n",
              "       [18399.,   160.],\n",
              "       [11900.,    97.],\n",
              "       [13200.,    95.],\n",
              "       [15580.,    95.],\n",
              "       [16900.,    95.],\n",
              "       [16630.,    97.],\n",
              "       [17950.,    95.],\n",
              "       [18150.,   142.],\n",
              "       [ 5572.,    68.],\n",
              "       [ 7957.,   102.],\n",
              "       [ 6229.,    68.],\n",
              "       [ 6692.,    68.],\n",
              "       [ 7609.,    68.],\n",
              "       [ 8921.,    88.],\n",
              "       [22018.,   143.],\n",
              "       [11850.,   110.],\n",
              "       [12170.,   110.],\n",
              "       [15040.,   110.],\n",
              "       [15510.,   110.],\n",
              "       [18150.,   160.],\n",
              "       [18620.,   160.],\n",
              "       [ 5118.,    69.],\n",
              "       [ 7053.,    73.],\n",
              "       [ 7603.,    73.],\n",
              "       [ 7126.,    82.],\n",
              "       [ 7775.,    82.],\n",
              "       [ 9960.,    94.],\n",
              "       [ 9233.,    82.],\n",
              "       [11259.,   111.],\n",
              "       [ 7463.,    82.],\n",
              "       [10198.,    94.],\n",
              "       [ 8013.,    82.],\n",
              "       [11694.,   111.],\n",
              "       [ 5348.,    62.],\n",
              "       [ 6338.,    62.],\n",
              "       [ 6488.,    62.],\n",
              "       [ 6918.,    62.],\n",
              "       [ 7898.,    62.],\n",
              "       [ 8778.,    62.],\n",
              "       [ 6938.,    70.],\n",
              "       [ 7198.,    70.],\n",
              "       [ 7898.,    56.],\n",
              "       [ 7788.,    56.],\n",
              "       [ 7738.,    70.],\n",
              "       [ 8358.,    70.],\n",
              "       [ 9258.,    70.],\n",
              "       [ 8058.,    70.],\n",
              "       [ 8238.,    70.],\n",
              "       [ 9298.,   112.],\n",
              "       [ 9538.,   112.],\n",
              "       [ 8449.,   116.],\n",
              "       [ 9639.,   116.],\n",
              "       [ 9989.,   116.],\n",
              "       [11199.,   116.],\n",
              "       [11549.,   116.],\n",
              "       [17669.,   116.],\n",
              "       [ 8948.,    92.],\n",
              "       [10698.,    73.],\n",
              "       [ 9988.,    92.],\n",
              "       [10898.,    92.],\n",
              "       [11248.,    92.],\n",
              "       [16558.,   161.],\n",
              "       [15998.,   161.],\n",
              "       [15690.,   156.],\n",
              "       [ 7775.,    52.],\n",
              "       [ 7975.,    85.],\n",
              "       [ 7995.,    52.],\n",
              "       [ 8195.,    85.],\n",
              "       [ 8495.,    85.],\n",
              "       [ 9495.,    68.],\n",
              "       [ 9995.,   100.],\n",
              "       [ 9980.,    90.],\n",
              "       [12940.,   114.],\n",
              "       [13415.,   114.],\n",
              "       [15985.,   114.],\n",
              "       [16515.,   114.],\n",
              "       [18420.,   162.],\n",
              "       [18950.,   162.],\n",
              "       [16845.,   114.],\n",
              "       [19045.,   160.],\n",
              "       [21485.,   134.],\n",
              "       [22470.,   106.],\n",
              "       [22625.,   114.]])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_scaled"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U2nni1LPm41_",
        "outputId": "c816fcf5-930a-4aa2-d9d7-b7aed99b8c6e"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.29500969, 0.35526316],\n",
              "       [0.41191796, 0.44078947],\n",
              "       [0.42060258, 0.40789474],\n",
              "       [0.62652816, 0.60526316],\n",
              "       [0.37784755, 0.34868421],\n",
              "       [0.39438172, 0.34868421],\n",
              "       [0.52949429, 0.48026316],\n",
              "       [0.53400361, 0.48026316],\n",
              "       [0.00110228, 0.        ],\n",
              "       [0.03931458, 0.14473684],\n",
              "       [0.04866725, 0.14473684],\n",
              "       [0.01516467, 0.13157895],\n",
              "       [0.04205358, 0.13157895],\n",
              "       [0.09482931, 0.35526316],\n",
              "       [0.03711003, 0.13157895],\n",
              "       [0.05257532, 0.13157895],\n",
              "       [0.08320529, 0.13157895],\n",
              "       [0.12702919, 0.26315789],\n",
              "       [0.26207495, 0.63815789],\n",
              "       [0.04546062, 0.06578947],\n",
              "       [0.05801991, 0.18421053],\n",
              "       [0.00938606, 0.07894737],\n",
              "       [0.04713074, 0.18421053],\n",
              "       [0.06717216, 0.18421053],\n",
              "       [0.07271695, 0.18421053],\n",
              "       [0.07271695, 0.18421053],\n",
              "       [0.09275837, 0.25      ],\n",
              "       [0.13284121, 0.25      ],\n",
              "       [0.12449061, 0.25      ],\n",
              "       [0.17292404, 0.25      ],\n",
              "       [0.26144031, 0.34868421],\n",
              "       [0.17459416, 0.34210526],\n",
              "       [0.90627296, 0.84210526],\n",
              "       [0.00257198, 0.13157895],\n",
              "       [0.03263411, 0.13157895],\n",
              "       [0.05601577, 0.13157895],\n",
              "       [0.05267553, 0.13157895],\n",
              "       [0.07605718, 0.13157895],\n",
              "       [0.12449061, 0.23684211],\n",
              "       [0.11279979, 0.23684211],\n",
              "       [0.18294475, 0.23684211],\n",
              "       [0.17125392, 0.23684211],\n",
              "       [0.20465629, 0.23684211],\n",
              "       [0.43964193, 0.47368421],\n",
              "       [0.68254392, 0.49342105],\n",
              "       [0.7725967 , 0.49342105],\n",
              "       [0.77019173, 0.49342105],\n",
              "       [0.88456143, 0.49342105],\n",
              "       [1.        , 0.70394737],\n",
              "       [0.00905204, 0.13157895],\n",
              "       [0.03577393, 0.13157895],\n",
              "       [0.05180707, 0.13157895],\n",
              "       [0.08587748, 0.35526316],\n",
              "       [0.16170085, 0.44736842],\n",
              "       [0.1129334 , 0.26315789],\n",
              "       [0.06249582, 0.26315789],\n",
              "       [0.10257866, 0.26315789],\n",
              "       [0.13898724, 0.44736842],\n",
              "       [0.13898724, 0.44736842],\n",
              "       [0.0127263 , 0.13815789],\n",
              "       [0.06617008, 0.04605263],\n",
              "       [0.05113902, 0.13815789],\n",
              "       [0.05781949, 0.13815789],\n",
              "       [0.07452068, 0.13815789],\n",
              "       [0.07285056, 0.13815789],\n",
              "       [0.08955174, 0.13815789],\n",
              "       [0.07953103, 0.13815789],\n",
              "       [0.09623221, 0.13815789],\n",
              "       [0.1045828 , 0.13815789],\n",
              "       [0.12796446, 0.32236842],\n",
              "       [0.14800588, 0.32236842],\n",
              "       [0.27994522, 0.68421053],\n",
              "       [0.31000735, 0.68421053],\n",
              "       [0.27994522, 0.68421053],\n",
              "       [0.40353397, 0.73684211],\n",
              "       [0.48703988, 1.        ],\n",
              "       [0.44361681, 0.73684211],\n",
              "       [0.22653484, 0.32236842],\n",
              "       [0.26995791, 0.30921053],\n",
              "       [0.34945554, 0.30921053],\n",
              "       [0.39354666, 0.30921053],\n",
              "       [0.38452802, 0.32236842],\n",
              "       [0.42861915, 0.30921053],\n",
              "       [0.43529962, 0.61842105],\n",
              "       [0.01516467, 0.13157895],\n",
              "       [0.09482931, 0.35526316],\n",
              "       [0.03711003, 0.13157895],\n",
              "       [0.05257532, 0.13157895],\n",
              "       [0.08320529, 0.13157895],\n",
              "       [0.12702919, 0.26315789],\n",
              "       [0.56449997, 0.625     ],\n",
              "       [0.22486472, 0.40789474],\n",
              "       [0.23555348, 0.40789474],\n",
              "       [0.33141826, 0.40789474],\n",
              "       [0.34711738, 0.40789474],\n",
              "       [0.43529962, 0.73684211],\n",
              "       [0.45099873, 0.73684211],\n",
              "       [0.        , 0.13815789],\n",
              "       [0.06463358, 0.16447368],\n",
              "       [0.08300488, 0.16447368],\n",
              "       [0.06707195, 0.22368421],\n",
              "       [0.08875008, 0.22368421],\n",
              "       [0.16173425, 0.30263158],\n",
              "       [0.13745073, 0.22368421],\n",
              "       [0.20512392, 0.41447368],\n",
              "       [0.07832855, 0.22368421],\n",
              "       [0.16968401, 0.30263158],\n",
              "       [0.09669985, 0.22368421],\n",
              "       [0.21965395, 0.41447368],\n",
              "       [0.00768254, 0.09210526],\n",
              "       [0.04075089, 0.09210526],\n",
              "       [0.04576124, 0.09210526],\n",
              "       [0.06012426, 0.09210526],\n",
              "       [0.09285857, 0.09210526],\n",
              "       [0.12225266, 0.09210526],\n",
              "       [0.0607923 , 0.14473684],\n",
              "       [0.06947692, 0.14473684],\n",
              "       [0.09285857, 0.05263158],\n",
              "       [0.08918431, 0.05263158],\n",
              "       [0.0875142 , 0.14473684],\n",
              "       [0.10822366, 0.14473684],\n",
              "       [0.13828579, 0.14473684],\n",
              "       [0.09820295, 0.14473684],\n",
              "       [0.10421538, 0.14473684],\n",
              "       [0.13962189, 0.42105263],\n",
              "       [0.14763845, 0.42105263],\n",
              "       [0.11126328, 0.44736842],\n",
              "       [0.15101209, 0.44736842],\n",
              "       [0.16270292, 0.44736842],\n",
              "       [0.20311978, 0.44736842],\n",
              "       [0.21481061, 0.44736842],\n",
              "       [0.41923308, 0.44736842],\n",
              "       [0.12793106, 0.28947368],\n",
              "       [0.1863852 , 0.16447368],\n",
              "       [0.16266952, 0.28947368],\n",
              "       [0.19306567, 0.28947368],\n",
              "       [0.2047565 , 0.28947368],\n",
              "       [0.38212305, 0.74342105],\n",
              "       [0.36341773, 0.74342105],\n",
              "       [0.3531298 , 0.71052632],\n",
              "       [0.08875008, 0.02631579],\n",
              "       [0.09543056, 0.24342105],\n",
              "       [0.0960986 , 0.02631579],\n",
              "       [0.10277908, 0.24342105],\n",
              "       [0.11279979, 0.24342105],\n",
              "       [0.14620215, 0.13157895],\n",
              "       [0.16290333, 0.34210526],\n",
              "       [0.1624023 , 0.27631579],\n",
              "       [0.2612733 , 0.43421053],\n",
              "       [0.27713942, 0.43421053],\n",
              "       [0.3629835 , 0.43421053],\n",
              "       [0.38068675, 0.43421053],\n",
              "       [0.44431826, 0.75      ],\n",
              "       [0.46202151, 0.75      ],\n",
              "       [0.39170953, 0.43421053],\n",
              "       [0.46519474, 0.73684211],\n",
              "       [0.54669651, 0.56578947],\n",
              "       [0.57959784, 0.38157895],\n",
              "       [0.5847752 , 0.43421053]])"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dbs = DBSCAN(eps=0.17, min_samples=5)\n",
        "dbs.fit(X_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "2ZUVfQIwnL3N",
        "outputId": "da11a3d4-27af-4cf1-ca0a-52669e9c930d"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DBSCAN(eps=0.17)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DBSCAN(eps=0.17)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DBSCAN<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.DBSCAN.html\">?<span>Documentation for DBSCAN</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DBSCAN(eps=0.17)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dbs.labels_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BrCflBh7pDT0",
        "outputId": "be3ab852-3c75-4833-ce83-f8c53feb4715"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, -1,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=dbs.labels_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "0mMOYyghpyrE",
        "outputId": "5e49f24b-8e3a-41df-e91b-51ee9c960126"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ec0a520a680>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Nearest Neighbors"
      ],
      "metadata": {
        "id": "o__0Y-gBroWI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import NearestNeighbors\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n"
      ],
      "metadata": {
        "id": "GJwbDTCXrqDk"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mlb = pd.read_csv('/content/mlb_batting_cleaned.csv')"
      ],
      "metadata": {
        "id": "L1qznxXEsSSn"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mlb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "uhZ-IuUwscr4",
        "outputId": "227557fb-4890-4bb7-f747-1708ce8a9760"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Name  Age   Tm  Lg    G   PA   AB   R    H  2B  ...    OBP  \\\n",
              "0           CJ Abrams   21  WSN  NL   44  163  159  17   41   7  ...  0.276   \n",
              "1        Albert Abreu   26  KCR  AL    1    0    0   0    0   0  ...  0.000   \n",
              "2          José Abreu   35  CHW  AL  157  679  601  85  183  40  ...  0.378   \n",
              "3    Ronald Acuna Jr.   24  ATL  NL  119  533  467  71  124  24  ...  0.351   \n",
              "4        Willy Adames   26  MIL  NL  139  617  563  83  134  31  ...  0.298   \n",
              "..                ...  ...  ...  ..  ...  ...  ...  ..  ...  ..  ...    ...   \n",
              "784        Juan Yepez   24  STL  NL   76  274  253  27   64  13  ...  0.296   \n",
              "785       Jared Young   26  CHC  NL    6   22   19   2    5   2  ...  0.364   \n",
              "786       Seby Zavala   28  CHW  AL   61  205  178  22   48  14  ...  0.347   \n",
              "787    Bradley Zimmer   29  TOR  AL   23   14   13   3    1   0  ...  0.143   \n",
              "788       Mike Zunino   31  TBR  AL   36  123  115   7   17   3  ...  0.195   \n",
              "\n",
              "       SLG    OPS  OPS+   TB  GDP  HBP  SH  SF  IBB  \n",
              "0    0.327  0.603    75   52    1    3   0   0    0  \n",
              "1    0.000  0.000     0    0    0    0   0   0    0  \n",
              "2    0.446  0.824   132  268   19   12   0   4    2  \n",
              "3    0.413  0.764   113  193    8   10   0   3    4  \n",
              "4    0.458  0.756   112  258   11    1   0   4    3  \n",
              "..     ...    ...   ...  ...  ...  ...  ..  ..  ...  \n",
              "784  0.447  0.742   110  113    6    1   0   4    0  \n",
              "785  0.368  0.732   108    7    0    0   0   0    0  \n",
              "786  0.382  0.729   106   68    1    3   3   2    0  \n",
              "787  0.077  0.220   -34    1    0    1   0   0    0  \n",
              "788  0.304  0.499    45   35    2    1   0   1    0  \n",
              "\n",
              "[789 rows x 28 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7593970-08dc-4356-997f-154c20f809d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tm</th>\n",
              "      <th>Lg</th>\n",
              "      <th>G</th>\n",
              "      <th>PA</th>\n",
              "      <th>AB</th>\n",
              "      <th>R</th>\n",
              "      <th>H</th>\n",
              "      <th>2B</th>\n",
              "      <th>...</th>\n",
              "      <th>OBP</th>\n",
              "      <th>SLG</th>\n",
              "      <th>OPS</th>\n",
              "      <th>OPS+</th>\n",
              "      <th>TB</th>\n",
              "      <th>GDP</th>\n",
              "      <th>HBP</th>\n",
              "      <th>SH</th>\n",
              "      <th>SF</th>\n",
              "      <th>IBB</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CJ Abrams</td>\n",
              "      <td>21</td>\n",
              "      <td>WSN</td>\n",
              "      <td>NL</td>\n",
              "      <td>44</td>\n",
              "      <td>163</td>\n",
              "      <td>159</td>\n",
              "      <td>17</td>\n",
              "      <td>41</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0.276</td>\n",
              "      <td>0.327</td>\n",
              "      <td>0.603</td>\n",
              "      <td>75</td>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albert Abreu</td>\n",
              "      <td>26</td>\n",
              "      <td>KCR</td>\n",
              "      <td>AL</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>José Abreu</td>\n",
              "      <td>35</td>\n",
              "      <td>CHW</td>\n",
              "      <td>AL</td>\n",
              "      <td>157</td>\n",
              "      <td>679</td>\n",
              "      <td>601</td>\n",
              "      <td>85</td>\n",
              "      <td>183</td>\n",
              "      <td>40</td>\n",
              "      <td>...</td>\n",
              "      <td>0.378</td>\n",
              "      <td>0.446</td>\n",
              "      <td>0.824</td>\n",
              "      <td>132</td>\n",
              "      <td>268</td>\n",
              "      <td>19</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ronald Acuna Jr.</td>\n",
              "      <td>24</td>\n",
              "      <td>ATL</td>\n",
              "      <td>NL</td>\n",
              "      <td>119</td>\n",
              "      <td>533</td>\n",
              "      <td>467</td>\n",
              "      <td>71</td>\n",
              "      <td>124</td>\n",
              "      <td>24</td>\n",
              "      <td>...</td>\n",
              "      <td>0.351</td>\n",
              "      <td>0.413</td>\n",
              "      <td>0.764</td>\n",
              "      <td>113</td>\n",
              "      <td>193</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Willy Adames</td>\n",
              "      <td>26</td>\n",
              "      <td>MIL</td>\n",
              "      <td>NL</td>\n",
              "      <td>139</td>\n",
              "      <td>617</td>\n",
              "      <td>563</td>\n",
              "      <td>83</td>\n",
              "      <td>134</td>\n",
              "      <td>31</td>\n",
              "      <td>...</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.458</td>\n",
              "      <td>0.756</td>\n",
              "      <td>112</td>\n",
              "      <td>258</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>784</th>\n",
              "      <td>Juan Yepez</td>\n",
              "      <td>24</td>\n",
              "      <td>STL</td>\n",
              "      <td>NL</td>\n",
              "      <td>76</td>\n",
              "      <td>274</td>\n",
              "      <td>253</td>\n",
              "      <td>27</td>\n",
              "      <td>64</td>\n",
              "      <td>13</td>\n",
              "      <td>...</td>\n",
              "      <td>0.296</td>\n",
              "      <td>0.447</td>\n",
              "      <td>0.742</td>\n",
              "      <td>110</td>\n",
              "      <td>113</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>785</th>\n",
              "      <td>Jared Young</td>\n",
              "      <td>26</td>\n",
              "      <td>CHC</td>\n",
              "      <td>NL</td>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "      <td>19</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0.364</td>\n",
              "      <td>0.368</td>\n",
              "      <td>0.732</td>\n",
              "      <td>108</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>786</th>\n",
              "      <td>Seby Zavala</td>\n",
              "      <td>28</td>\n",
              "      <td>CHW</td>\n",
              "      <td>AL</td>\n",
              "      <td>61</td>\n",
              "      <td>205</td>\n",
              "      <td>178</td>\n",
              "      <td>22</td>\n",
              "      <td>48</td>\n",
              "      <td>14</td>\n",
              "      <td>...</td>\n",
              "      <td>0.347</td>\n",
              "      <td>0.382</td>\n",
              "      <td>0.729</td>\n",
              "      <td>106</td>\n",
              "      <td>68</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>787</th>\n",
              "      <td>Bradley Zimmer</td>\n",
              "      <td>29</td>\n",
              "      <td>TOR</td>\n",
              "      <td>AL</td>\n",
              "      <td>23</td>\n",
              "      <td>14</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.143</td>\n",
              "      <td>0.077</td>\n",
              "      <td>0.220</td>\n",
              "      <td>-34</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>788</th>\n",
              "      <td>Mike Zunino</td>\n",
              "      <td>31</td>\n",
              "      <td>TBR</td>\n",
              "      <td>AL</td>\n",
              "      <td>36</td>\n",
              "      <td>123</td>\n",
              "      <td>115</td>\n",
              "      <td>7</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0.195</td>\n",
              "      <td>0.304</td>\n",
              "      <td>0.499</td>\n",
              "      <td>45</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>789 rows × 28 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7593970-08dc-4356-997f-154c20f809d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f7593970-08dc-4356-997f-154c20f809d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f7593970-08dc-4356-997f-154c20f809d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-61cddd45-608f-4cd8-a764-0d8e5576a52c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-61cddd45-608f-4cd8-a764-0d8e5576a52c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-61cddd45-608f-4cd8-a764-0d8e5576a52c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a8264401-ce00-45e7-b640-d14061b802ea\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mlb')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a8264401-ce00-45e7-b640-d14061b802ea button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('mlb');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mlb"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_closest_players(df):\n",
        "  player_name = input(\"Enter a player's name: \")\n",
        "  player_names = df['Name']\n",
        "  features = df.drop(columns=['Name'])\n",
        "\n",
        "\n",
        "  num_cols = features.select_dtypes(exclude='object')\n",
        "  categorical_cols = features.select_dtypes(include='object').columns\n",
        "\n",
        "  ohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
        "\n",
        "  encoded = ohe.fit_transform(df[categorical_cols])\n",
        "  encoded_df = pd.DataFrame(encoded, columns=ohe.get_feature_names_out(categorical_cols))\n",
        "\n",
        "  mms = MinMaxScaler()\n",
        "  features_scaled = mms.fit_transform(num_cols)\n",
        "\n",
        "  nn = NearestNeighbors(n_neighbors=3)\n",
        "  nn.fit(features_scaled)\n",
        "\n",
        "  player_index = player_names[player_names == player_name].index[0]\n",
        "\n",
        "  dist, neighbors = nn.kneighbors([features_scaled[player_index]])\n",
        "\n",
        "  closest_neighbors = neighbors[0][1:]\n",
        "  closest_players = player_names.iloc[closest_neighbors].values\n",
        "\n",
        "  print(\"The first closest player: \", closest_players[0])\n",
        "  print(\"The second closest player: \", closest_players[1])\n",
        "\n"
      ],
      "metadata": {
        "id": "ApWghkoTsdBs"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "find_closest_players(mlb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNXvmiS-xWBc",
        "outputId": "b7f6040d-1bcc-4395-c3c2-0a7d5cf8f5dc"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a player's name: Shohei Ohtani\n",
            "The first closest player:  Francisco Lindor#\n",
            "The second closest player:  Adolis García\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Fgm6uw9mxdmL"
      },
      "execution_count": 44,
      "outputs": []
    }
  ]
}